
stm32_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a44  08003a44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a44  08003a44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a44  08003a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003a58  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000669c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001399  00000000  00000000  000266d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f314  00000000  00000000  00028798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066a4  00000000  00000000  00037aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005beeb  00000000  00000000  0003e150  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a03b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018d0  00000000  00000000  0009a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003950 	.word	0x08003950

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003950 	.word	0x08003950

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	0244      	lsls	r4, r0, #9
 800022c:	b5e0      	push	{r5, r6, r7, lr}
 800022e:	0046      	lsls	r6, r0, #1
 8000230:	4688      	mov	r8, r1
 8000232:	0a64      	lsrs	r4, r4, #9
 8000234:	0e36      	lsrs	r6, r6, #24
 8000236:	0fc7      	lsrs	r7, r0, #31
 8000238:	2e00      	cmp	r6, #0
 800023a:	d063      	beq.n	8000304 <__aeabi_fdiv+0xe4>
 800023c:	2eff      	cmp	r6, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431c      	orrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469b      	mov	fp, r3
 800024e:	3e7f      	subs	r6, #127	; 0x7f
 8000250:	4643      	mov	r3, r8
 8000252:	4642      	mov	r2, r8
 8000254:	025d      	lsls	r5, r3, #9
 8000256:	0fd2      	lsrs	r2, r2, #31
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0a6d      	lsrs	r5, r5, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	4690      	mov	r8, r2
 8000260:	4692      	mov	sl, r2
 8000262:	d065      	beq.n	8000330 <__aeabi_fdiv+0x110>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d055      	beq.n	8000314 <__aeabi_fdiv+0xf4>
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	00ed      	lsls	r5, r5, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	4315      	orrs	r5, r2
 8000274:	1af6      	subs	r6, r6, r3
 8000276:	4643      	mov	r3, r8
 8000278:	464a      	mov	r2, r9
 800027a:	407b      	eors	r3, r7
 800027c:	2a0f      	cmp	r2, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e08d      	b.n	800039e <__aeabi_fdiv+0x17e>
 8000282:	486d      	ldr	r0, [pc, #436]	; (8000438 <__aeabi_fdiv+0x218>)
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	5882      	ldr	r2, [r0, r2]
 8000288:	4697      	mov	pc, r2
 800028a:	2c00      	cmp	r4, #0
 800028c:	d154      	bne.n	8000338 <__aeabi_fdiv+0x118>
 800028e:	2308      	movs	r3, #8
 8000290:	4699      	mov	r9, r3
 8000292:	3b06      	subs	r3, #6
 8000294:	26ff      	movs	r6, #255	; 0xff
 8000296:	469b      	mov	fp, r3
 8000298:	e7da      	b.n	8000250 <__aeabi_fdiv+0x30>
 800029a:	2500      	movs	r5, #0
 800029c:	4653      	mov	r3, sl
 800029e:	2902      	cmp	r1, #2
 80002a0:	d01b      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002a2:	2903      	cmp	r1, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e0bf      	b.n	8000428 <__aeabi_fdiv+0x208>
 80002a8:	2901      	cmp	r1, #1
 80002aa:	d028      	beq.n	80002fe <__aeabi_fdiv+0xde>
 80002ac:	0030      	movs	r0, r6
 80002ae:	307f      	adds	r0, #127	; 0x7f
 80002b0:	2800      	cmp	r0, #0
 80002b2:	dd20      	ble.n	80002f6 <__aeabi_fdiv+0xd6>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	0030      	movs	r0, r6
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <__aeabi_fdiv+0x21c>)
 80002ca:	3080      	adds	r0, #128	; 0x80
 80002cc:	4015      	ands	r5, r2
 80002ce:	28fe      	cmp	r0, #254	; 0xfe
 80002d0:	dc03      	bgt.n	80002da <__aeabi_fdiv+0xba>
 80002d2:	01ac      	lsls	r4, r5, #6
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	b2c2      	uxtb	r2, r0
 80002d8:	e001      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002da:	22ff      	movs	r2, #255	; 0xff
 80002dc:	2400      	movs	r4, #0
 80002de:	0264      	lsls	r4, r4, #9
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	0a60      	lsrs	r0, r4, #9
 80002e4:	07db      	lsls	r3, r3, #31
 80002e6:	4310      	orrs	r0, r2
 80002e8:	4318      	orrs	r0, r3
 80002ea:	bc3c      	pop	{r2, r3, r4, r5}
 80002ec:	4690      	mov	r8, r2
 80002ee:	4699      	mov	r9, r3
 80002f0:	46a2      	mov	sl, r4
 80002f2:	46ab      	mov	fp, r5
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	2201      	movs	r2, #1
 80002f8:	1a10      	subs	r0, r2, r0
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dd7c      	ble.n	80003f8 <__aeabi_fdiv+0x1d8>
 80002fe:	2200      	movs	r2, #0
 8000300:	2400      	movs	r4, #0
 8000302:	e7ec      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d11d      	bne.n	8000344 <__aeabi_fdiv+0x124>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2600      	movs	r6, #0
 8000310:	469b      	mov	fp, r3
 8000312:	e79d      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000314:	3eff      	subs	r6, #255	; 0xff
 8000316:	2d00      	cmp	r5, #0
 8000318:	d120      	bne.n	800035c <__aeabi_fdiv+0x13c>
 800031a:	2102      	movs	r1, #2
 800031c:	4643      	mov	r3, r8
 800031e:	464a      	mov	r2, r9
 8000320:	407b      	eors	r3, r7
 8000322:	430a      	orrs	r2, r1
 8000324:	2a0f      	cmp	r2, #15
 8000326:	d8d8      	bhi.n	80002da <__aeabi_fdiv+0xba>
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <__aeabi_fdiv+0x220>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	5882      	ldr	r2, [r0, r2]
 800032e:	4697      	mov	pc, r2
 8000330:	2d00      	cmp	r5, #0
 8000332:	d119      	bne.n	8000368 <__aeabi_fdiv+0x148>
 8000334:	2101      	movs	r1, #1
 8000336:	e7f1      	b.n	800031c <__aeabi_fdiv+0xfc>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469b      	mov	fp, r3
 8000342:	e785      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000344:	0020      	movs	r0, r4
 8000346:	f000 ffab 	bl	80012a0 <__clzsi2>
 800034a:	2676      	movs	r6, #118	; 0x76
 800034c:	1f43      	subs	r3, r0, #5
 800034e:	409c      	lsls	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4276      	negs	r6, r6
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	4699      	mov	r9, r3
 8000358:	469b      	mov	fp, r3
 800035a:	e779      	b.n	8000250 <__aeabi_fdiv+0x30>
 800035c:	464a      	mov	r2, r9
 800035e:	2303      	movs	r3, #3
 8000360:	431a      	orrs	r2, r3
 8000362:	4691      	mov	r9, r2
 8000364:	2103      	movs	r1, #3
 8000366:	e786      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000368:	0028      	movs	r0, r5
 800036a:	f000 ff99 	bl	80012a0 <__clzsi2>
 800036e:	1f43      	subs	r3, r0, #5
 8000370:	1836      	adds	r6, r6, r0
 8000372:	409d      	lsls	r5, r3
 8000374:	3676      	adds	r6, #118	; 0x76
 8000376:	2100      	movs	r1, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	2480      	movs	r4, #128	; 0x80
 800037c:	2300      	movs	r3, #0
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	e7ac      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000384:	2500      	movs	r5, #0
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421c      	tst	r4, r3
 800038c:	d028      	beq.n	80003e0 <__aeabi_fdiv+0x1c0>
 800038e:	421d      	tst	r5, r3
 8000390:	d126      	bne.n	80003e0 <__aeabi_fdiv+0x1c0>
 8000392:	432b      	orrs	r3, r5
 8000394:	025c      	lsls	r4, r3, #9
 8000396:	0a64      	lsrs	r4, r4, #9
 8000398:	4643      	mov	r3, r8
 800039a:	22ff      	movs	r2, #255	; 0xff
 800039c:	e79f      	b.n	80002de <__aeabi_fdiv+0xbe>
 800039e:	0162      	lsls	r2, r4, #5
 80003a0:	016c      	lsls	r4, r5, #5
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d224      	bcs.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003a6:	211b      	movs	r1, #27
 80003a8:	2500      	movs	r5, #0
 80003aa:	3e01      	subs	r6, #1
 80003ac:	2701      	movs	r7, #1
 80003ae:	0010      	movs	r0, r2
 80003b0:	006d      	lsls	r5, r5, #1
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2800      	cmp	r0, #0
 80003b6:	db01      	blt.n	80003bc <__aeabi_fdiv+0x19c>
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d801      	bhi.n	80003c0 <__aeabi_fdiv+0x1a0>
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	433d      	orrs	r5, r7
 80003c0:	3901      	subs	r1, #1
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d1f3      	bne.n	80003ae <__aeabi_fdiv+0x18e>
 80003c6:	0014      	movs	r4, r2
 80003c8:	1e62      	subs	r2, r4, #1
 80003ca:	4194      	sbcs	r4, r2
 80003cc:	4325      	orrs	r5, r4
 80003ce:	e76d      	b.n	80002ac <__aeabi_fdiv+0x8c>
 80003d0:	46ba      	mov	sl, r7
 80003d2:	4659      	mov	r1, fp
 80003d4:	0025      	movs	r5, r4
 80003d6:	4653      	mov	r3, sl
 80003d8:	2902      	cmp	r1, #2
 80003da:	d000      	beq.n	80003de <__aeabi_fdiv+0x1be>
 80003dc:	e761      	b.n	80002a2 <__aeabi_fdiv+0x82>
 80003de:	e77c      	b.n	80002da <__aeabi_fdiv+0xba>
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0264      	lsls	r4, r4, #9
 80003e8:	0a64      	lsrs	r4, r4, #9
 80003ea:	003b      	movs	r3, r7
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	e776      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003f0:	1b12      	subs	r2, r2, r4
 80003f2:	211a      	movs	r1, #26
 80003f4:	2501      	movs	r5, #1
 80003f6:	e7d9      	b.n	80003ac <__aeabi_fdiv+0x18c>
 80003f8:	369e      	adds	r6, #158	; 0x9e
 80003fa:	002a      	movs	r2, r5
 80003fc:	40b5      	lsls	r5, r6
 80003fe:	002c      	movs	r4, r5
 8000400:	40c2      	lsrs	r2, r0
 8000402:	1e65      	subs	r5, r4, #1
 8000404:	41ac      	sbcs	r4, r5
 8000406:	4314      	orrs	r4, r2
 8000408:	0762      	lsls	r2, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 800040c:	220f      	movs	r2, #15
 800040e:	4022      	ands	r2, r4
 8000410:	2a04      	cmp	r2, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 8000414:	3404      	adds	r4, #4
 8000416:	0162      	lsls	r2, r4, #5
 8000418:	d403      	bmi.n	8000422 <__aeabi_fdiv+0x202>
 800041a:	01a4      	lsls	r4, r4, #6
 800041c:	0a64      	lsrs	r4, r4, #9
 800041e:	2200      	movs	r2, #0
 8000420:	e75d      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000422:	2201      	movs	r2, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e75a      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	432c      	orrs	r4, r5
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e753      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	08003968 	.word	0x08003968
 800043c:	f7ffffff 	.word	0xf7ffffff
 8000440:	080039a8 	.word	0x080039a8

08000444 <__aeabi_dadd>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	464f      	mov	r7, r9
 8000448:	4646      	mov	r6, r8
 800044a:	46d6      	mov	lr, sl
 800044c:	000c      	movs	r4, r1
 800044e:	0309      	lsls	r1, r1, #12
 8000450:	b5c0      	push	{r6, r7, lr}
 8000452:	0a49      	lsrs	r1, r1, #9
 8000454:	0f47      	lsrs	r7, r0, #29
 8000456:	005e      	lsls	r6, r3, #1
 8000458:	4339      	orrs	r1, r7
 800045a:	031f      	lsls	r7, r3, #12
 800045c:	0fdb      	lsrs	r3, r3, #31
 800045e:	469c      	mov	ip, r3
 8000460:	0065      	lsls	r5, r4, #1
 8000462:	0a7b      	lsrs	r3, r7, #9
 8000464:	0f57      	lsrs	r7, r2, #29
 8000466:	431f      	orrs	r7, r3
 8000468:	0d6d      	lsrs	r5, r5, #21
 800046a:	0fe4      	lsrs	r4, r4, #31
 800046c:	0d76      	lsrs	r6, r6, #21
 800046e:	46a1      	mov	r9, r4
 8000470:	00c0      	lsls	r0, r0, #3
 8000472:	46b8      	mov	r8, r7
 8000474:	00d2      	lsls	r2, r2, #3
 8000476:	1bab      	subs	r3, r5, r6
 8000478:	4564      	cmp	r4, ip
 800047a:	d07b      	beq.n	8000574 <__aeabi_dadd+0x130>
 800047c:	2b00      	cmp	r3, #0
 800047e:	dd5f      	ble.n	8000540 <__aeabi_dadd+0xfc>
 8000480:	2e00      	cmp	r6, #0
 8000482:	d000      	beq.n	8000486 <__aeabi_dadd+0x42>
 8000484:	e0a4      	b.n	80005d0 <__aeabi_dadd+0x18c>
 8000486:	003e      	movs	r6, r7
 8000488:	4316      	orrs	r6, r2
 800048a:	d100      	bne.n	800048e <__aeabi_dadd+0x4a>
 800048c:	e112      	b.n	80006b4 <__aeabi_dadd+0x270>
 800048e:	1e5e      	subs	r6, r3, #1
 8000490:	2e00      	cmp	r6, #0
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x52>
 8000494:	e19e      	b.n	80007d4 <__aeabi_dadd+0x390>
 8000496:	1a87      	subs	r7, r0, r2
 8000498:	4643      	mov	r3, r8
 800049a:	42b8      	cmp	r0, r7
 800049c:	4180      	sbcs	r0, r0
 800049e:	2501      	movs	r5, #1
 80004a0:	1ac9      	subs	r1, r1, r3
 80004a2:	4240      	negs	r0, r0
 80004a4:	1a09      	subs	r1, r1, r0
 80004a6:	020b      	lsls	r3, r1, #8
 80004a8:	d400      	bmi.n	80004ac <__aeabi_dadd+0x68>
 80004aa:	e131      	b.n	8000710 <__aeabi_dadd+0x2cc>
 80004ac:	0249      	lsls	r1, r1, #9
 80004ae:	0a4e      	lsrs	r6, r1, #9
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_dadd+0x72>
 80004b4:	e16e      	b.n	8000794 <__aeabi_dadd+0x350>
 80004b6:	0030      	movs	r0, r6
 80004b8:	f000 fef2 	bl	80012a0 <__clzsi2>
 80004bc:	0003      	movs	r3, r0
 80004be:	3b08      	subs	r3, #8
 80004c0:	2b1f      	cmp	r3, #31
 80004c2:	dd00      	ble.n	80004c6 <__aeabi_dadd+0x82>
 80004c4:	e161      	b.n	800078a <__aeabi_dadd+0x346>
 80004c6:	2220      	movs	r2, #32
 80004c8:	0039      	movs	r1, r7
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	409e      	lsls	r6, r3
 80004ce:	40d1      	lsrs	r1, r2
 80004d0:	409f      	lsls	r7, r3
 80004d2:	430e      	orrs	r6, r1
 80004d4:	429d      	cmp	r5, r3
 80004d6:	dd00      	ble.n	80004da <__aeabi_dadd+0x96>
 80004d8:	e151      	b.n	800077e <__aeabi_dadd+0x33a>
 80004da:	1b5d      	subs	r5, r3, r5
 80004dc:	1c6b      	adds	r3, r5, #1
 80004de:	2b1f      	cmp	r3, #31
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_dadd+0xa0>
 80004e2:	e17c      	b.n	80007de <__aeabi_dadd+0x39a>
 80004e4:	2120      	movs	r1, #32
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	003d      	movs	r5, r7
 80004ea:	0030      	movs	r0, r6
 80004ec:	408f      	lsls	r7, r1
 80004ee:	4088      	lsls	r0, r1
 80004f0:	40dd      	lsrs	r5, r3
 80004f2:	1e79      	subs	r1, r7, #1
 80004f4:	418f      	sbcs	r7, r1
 80004f6:	0031      	movs	r1, r6
 80004f8:	2207      	movs	r2, #7
 80004fa:	4328      	orrs	r0, r5
 80004fc:	40d9      	lsrs	r1, r3
 80004fe:	2500      	movs	r5, #0
 8000500:	4307      	orrs	r7, r0
 8000502:	403a      	ands	r2, r7
 8000504:	2a00      	cmp	r2, #0
 8000506:	d009      	beq.n	800051c <__aeabi_dadd+0xd8>
 8000508:	230f      	movs	r3, #15
 800050a:	403b      	ands	r3, r7
 800050c:	2b04      	cmp	r3, #4
 800050e:	d005      	beq.n	800051c <__aeabi_dadd+0xd8>
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	42bb      	cmp	r3, r7
 8000514:	41bf      	sbcs	r7, r7
 8000516:	427f      	negs	r7, r7
 8000518:	19c9      	adds	r1, r1, r7
 800051a:	001f      	movs	r7, r3
 800051c:	020b      	lsls	r3, r1, #8
 800051e:	d400      	bmi.n	8000522 <__aeabi_dadd+0xde>
 8000520:	e226      	b.n	8000970 <__aeabi_dadd+0x52c>
 8000522:	1c6a      	adds	r2, r5, #1
 8000524:	4bc6      	ldr	r3, [pc, #792]	; (8000840 <__aeabi_dadd+0x3fc>)
 8000526:	0555      	lsls	r5, r2, #21
 8000528:	0d6d      	lsrs	r5, r5, #21
 800052a:	429a      	cmp	r2, r3
 800052c:	d100      	bne.n	8000530 <__aeabi_dadd+0xec>
 800052e:	e106      	b.n	800073e <__aeabi_dadd+0x2fa>
 8000530:	4ac4      	ldr	r2, [pc, #784]	; (8000844 <__aeabi_dadd+0x400>)
 8000532:	08ff      	lsrs	r7, r7, #3
 8000534:	400a      	ands	r2, r1
 8000536:	0753      	lsls	r3, r2, #29
 8000538:	0252      	lsls	r2, r2, #9
 800053a:	433b      	orrs	r3, r7
 800053c:	0b12      	lsrs	r2, r2, #12
 800053e:	e08e      	b.n	800065e <__aeabi_dadd+0x21a>
 8000540:	2b00      	cmp	r3, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_dadd+0x102>
 8000544:	e0b8      	b.n	80006b8 <__aeabi_dadd+0x274>
 8000546:	1c6b      	adds	r3, r5, #1
 8000548:	055b      	lsls	r3, r3, #21
 800054a:	0d5b      	lsrs	r3, r3, #21
 800054c:	2b01      	cmp	r3, #1
 800054e:	dc00      	bgt.n	8000552 <__aeabi_dadd+0x10e>
 8000550:	e130      	b.n	80007b4 <__aeabi_dadd+0x370>
 8000552:	1a87      	subs	r7, r0, r2
 8000554:	4643      	mov	r3, r8
 8000556:	42b8      	cmp	r0, r7
 8000558:	41b6      	sbcs	r6, r6
 800055a:	1acb      	subs	r3, r1, r3
 800055c:	4276      	negs	r6, r6
 800055e:	1b9e      	subs	r6, r3, r6
 8000560:	0233      	lsls	r3, r6, #8
 8000562:	d500      	bpl.n	8000566 <__aeabi_dadd+0x122>
 8000564:	e14c      	b.n	8000800 <__aeabi_dadd+0x3bc>
 8000566:	003b      	movs	r3, r7
 8000568:	4333      	orrs	r3, r6
 800056a:	d1a1      	bne.n	80004b0 <__aeabi_dadd+0x6c>
 800056c:	2200      	movs	r2, #0
 800056e:	2400      	movs	r4, #0
 8000570:	2500      	movs	r5, #0
 8000572:	e070      	b.n	8000656 <__aeabi_dadd+0x212>
 8000574:	2b00      	cmp	r3, #0
 8000576:	dc00      	bgt.n	800057a <__aeabi_dadd+0x136>
 8000578:	e0e5      	b.n	8000746 <__aeabi_dadd+0x302>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0x13c>
 800057e:	e083      	b.n	8000688 <__aeabi_dadd+0x244>
 8000580:	4eaf      	ldr	r6, [pc, #700]	; (8000840 <__aeabi_dadd+0x3fc>)
 8000582:	42b5      	cmp	r5, r6
 8000584:	d060      	beq.n	8000648 <__aeabi_dadd+0x204>
 8000586:	2680      	movs	r6, #128	; 0x80
 8000588:	0436      	lsls	r6, r6, #16
 800058a:	4337      	orrs	r7, r6
 800058c:	46b8      	mov	r8, r7
 800058e:	2b38      	cmp	r3, #56	; 0x38
 8000590:	dc00      	bgt.n	8000594 <__aeabi_dadd+0x150>
 8000592:	e13e      	b.n	8000812 <__aeabi_dadd+0x3ce>
 8000594:	4643      	mov	r3, r8
 8000596:	4313      	orrs	r3, r2
 8000598:	001f      	movs	r7, r3
 800059a:	1e7a      	subs	r2, r7, #1
 800059c:	4197      	sbcs	r7, r2
 800059e:	183f      	adds	r7, r7, r0
 80005a0:	4287      	cmp	r7, r0
 80005a2:	4180      	sbcs	r0, r0
 80005a4:	4240      	negs	r0, r0
 80005a6:	1809      	adds	r1, r1, r0
 80005a8:	020b      	lsls	r3, r1, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0x16a>
 80005ac:	e0b0      	b.n	8000710 <__aeabi_dadd+0x2cc>
 80005ae:	4ba4      	ldr	r3, [pc, #656]	; (8000840 <__aeabi_dadd+0x3fc>)
 80005b0:	3501      	adds	r5, #1
 80005b2:	429d      	cmp	r5, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x174>
 80005b6:	e0c3      	b.n	8000740 <__aeabi_dadd+0x2fc>
 80005b8:	4aa2      	ldr	r2, [pc, #648]	; (8000844 <__aeabi_dadd+0x400>)
 80005ba:	087b      	lsrs	r3, r7, #1
 80005bc:	400a      	ands	r2, r1
 80005be:	2101      	movs	r1, #1
 80005c0:	400f      	ands	r7, r1
 80005c2:	431f      	orrs	r7, r3
 80005c4:	0851      	lsrs	r1, r2, #1
 80005c6:	07d3      	lsls	r3, r2, #31
 80005c8:	2207      	movs	r2, #7
 80005ca:	431f      	orrs	r7, r3
 80005cc:	403a      	ands	r2, r7
 80005ce:	e799      	b.n	8000504 <__aeabi_dadd+0xc0>
 80005d0:	4e9b      	ldr	r6, [pc, #620]	; (8000840 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d038      	beq.n	8000648 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dadd+0x1a0>
 80005e2:	e0dc      	b.n	800079e <__aeabi_dadd+0x35a>
 80005e4:	2b1f      	cmp	r3, #31
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_dadd+0x1a6>
 80005e8:	e130      	b.n	800084c <__aeabi_dadd+0x408>
 80005ea:	001e      	movs	r6, r3
 80005ec:	4647      	mov	r7, r8
 80005ee:	3e20      	subs	r6, #32
 80005f0:	40f7      	lsrs	r7, r6
 80005f2:	46bc      	mov	ip, r7
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	d004      	beq.n	8000602 <__aeabi_dadd+0x1be>
 80005f8:	2640      	movs	r6, #64	; 0x40
 80005fa:	1af3      	subs	r3, r6, r3
 80005fc:	4646      	mov	r6, r8
 80005fe:	409e      	lsls	r6, r3
 8000600:	4332      	orrs	r2, r6
 8000602:	0017      	movs	r7, r2
 8000604:	4663      	mov	r3, ip
 8000606:	1e7a      	subs	r2, r7, #1
 8000608:	4197      	sbcs	r7, r2
 800060a:	431f      	orrs	r7, r3
 800060c:	e0cc      	b.n	80007a8 <__aeabi_dadd+0x364>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x1d0>
 8000612:	e204      	b.n	8000a1e <__aeabi_dadd+0x5da>
 8000614:	4643      	mov	r3, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	d100      	bne.n	800061c <__aeabi_dadd+0x1d8>
 800061a:	e159      	b.n	80008d0 <__aeabi_dadd+0x48c>
 800061c:	074b      	lsls	r3, r1, #29
 800061e:	08c0      	lsrs	r0, r0, #3
 8000620:	4318      	orrs	r0, r3
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	08c9      	lsrs	r1, r1, #3
 8000626:	031b      	lsls	r3, r3, #12
 8000628:	4219      	tst	r1, r3
 800062a:	d008      	beq.n	800063e <__aeabi_dadd+0x1fa>
 800062c:	4645      	mov	r5, r8
 800062e:	08ed      	lsrs	r5, r5, #3
 8000630:	421d      	tst	r5, r3
 8000632:	d104      	bne.n	800063e <__aeabi_dadd+0x1fa>
 8000634:	4643      	mov	r3, r8
 8000636:	08d0      	lsrs	r0, r2, #3
 8000638:	0759      	lsls	r1, r3, #29
 800063a:	4308      	orrs	r0, r1
 800063c:	0029      	movs	r1, r5
 800063e:	0f42      	lsrs	r2, r0, #29
 8000640:	00c9      	lsls	r1, r1, #3
 8000642:	4d7f      	ldr	r5, [pc, #508]	; (8000840 <__aeabi_dadd+0x3fc>)
 8000644:	4311      	orrs	r1, r2
 8000646:	00c0      	lsls	r0, r0, #3
 8000648:	074b      	lsls	r3, r1, #29
 800064a:	08ca      	lsrs	r2, r1, #3
 800064c:	497c      	ldr	r1, [pc, #496]	; (8000840 <__aeabi_dadd+0x3fc>)
 800064e:	08c0      	lsrs	r0, r0, #3
 8000650:	4303      	orrs	r3, r0
 8000652:	428d      	cmp	r5, r1
 8000654:	d068      	beq.n	8000728 <__aeabi_dadd+0x2e4>
 8000656:	0312      	lsls	r2, r2, #12
 8000658:	056d      	lsls	r5, r5, #21
 800065a:	0b12      	lsrs	r2, r2, #12
 800065c:	0d6d      	lsrs	r5, r5, #21
 800065e:	2100      	movs	r1, #0
 8000660:	0312      	lsls	r2, r2, #12
 8000662:	0018      	movs	r0, r3
 8000664:	0b13      	lsrs	r3, r2, #12
 8000666:	0d0a      	lsrs	r2, r1, #20
 8000668:	0512      	lsls	r2, r2, #20
 800066a:	431a      	orrs	r2, r3
 800066c:	4b76      	ldr	r3, [pc, #472]	; (8000848 <__aeabi_dadd+0x404>)
 800066e:	052d      	lsls	r5, r5, #20
 8000670:	4013      	ands	r3, r2
 8000672:	432b      	orrs	r3, r5
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	07e4      	lsls	r4, r4, #31
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	4323      	orrs	r3, r4
 800067c:	0019      	movs	r1, r3
 800067e:	bc1c      	pop	{r2, r3, r4}
 8000680:	4690      	mov	r8, r2
 8000682:	4699      	mov	r9, r3
 8000684:	46a2      	mov	sl, r4
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	003e      	movs	r6, r7
 800068a:	4316      	orrs	r6, r2
 800068c:	d012      	beq.n	80006b4 <__aeabi_dadd+0x270>
 800068e:	1e5e      	subs	r6, r3, #1
 8000690:	2e00      	cmp	r6, #0
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x252>
 8000694:	e100      	b.n	8000898 <__aeabi_dadd+0x454>
 8000696:	1887      	adds	r7, r0, r2
 8000698:	4287      	cmp	r7, r0
 800069a:	4180      	sbcs	r0, r0
 800069c:	4441      	add	r1, r8
 800069e:	4240      	negs	r0, r0
 80006a0:	1809      	adds	r1, r1, r0
 80006a2:	2501      	movs	r5, #1
 80006a4:	020b      	lsls	r3, r1, #8
 80006a6:	d533      	bpl.n	8000710 <__aeabi_dadd+0x2cc>
 80006a8:	2502      	movs	r5, #2
 80006aa:	e785      	b.n	80005b8 <__aeabi_dadd+0x174>
 80006ac:	4664      	mov	r4, ip
 80006ae:	0033      	movs	r3, r6
 80006b0:	4641      	mov	r1, r8
 80006b2:	0010      	movs	r0, r2
 80006b4:	001d      	movs	r5, r3
 80006b6:	e7c7      	b.n	8000648 <__aeabi_dadd+0x204>
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d000      	beq.n	80006be <__aeabi_dadd+0x27a>
 80006bc:	e0da      	b.n	8000874 <__aeabi_dadd+0x430>
 80006be:	000c      	movs	r4, r1
 80006c0:	4304      	orrs	r4, r0
 80006c2:	d0f3      	beq.n	80006ac <__aeabi_dadd+0x268>
 80006c4:	1c5c      	adds	r4, r3, #1
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x286>
 80006c8:	e19f      	b.n	8000a0a <__aeabi_dadd+0x5c6>
 80006ca:	4c5d      	ldr	r4, [pc, #372]	; (8000840 <__aeabi_dadd+0x3fc>)
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x28e>
 80006d0:	e12f      	b.n	8000932 <__aeabi_dadd+0x4ee>
 80006d2:	43db      	mvns	r3, r3
 80006d4:	2b38      	cmp	r3, #56	; 0x38
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0x296>
 80006d8:	e166      	b.n	80009a8 <__aeabi_dadd+0x564>
 80006da:	2b1f      	cmp	r3, #31
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x29c>
 80006de:	e183      	b.n	80009e8 <__aeabi_dadd+0x5a4>
 80006e0:	2420      	movs	r4, #32
 80006e2:	0005      	movs	r5, r0
 80006e4:	1ae4      	subs	r4, r4, r3
 80006e6:	000f      	movs	r7, r1
 80006e8:	40dd      	lsrs	r5, r3
 80006ea:	40d9      	lsrs	r1, r3
 80006ec:	40a0      	lsls	r0, r4
 80006ee:	4643      	mov	r3, r8
 80006f0:	40a7      	lsls	r7, r4
 80006f2:	1a5b      	subs	r3, r3, r1
 80006f4:	1e44      	subs	r4, r0, #1
 80006f6:	41a0      	sbcs	r0, r4
 80006f8:	4698      	mov	r8, r3
 80006fa:	432f      	orrs	r7, r5
 80006fc:	4338      	orrs	r0, r7
 80006fe:	1a17      	subs	r7, r2, r0
 8000700:	42ba      	cmp	r2, r7
 8000702:	4192      	sbcs	r2, r2
 8000704:	4643      	mov	r3, r8
 8000706:	4252      	negs	r2, r2
 8000708:	1a99      	subs	r1, r3, r2
 800070a:	4664      	mov	r4, ip
 800070c:	0035      	movs	r5, r6
 800070e:	e6ca      	b.n	80004a6 <__aeabi_dadd+0x62>
 8000710:	2207      	movs	r2, #7
 8000712:	403a      	ands	r2, r7
 8000714:	2a00      	cmp	r2, #0
 8000716:	d000      	beq.n	800071a <__aeabi_dadd+0x2d6>
 8000718:	e6f6      	b.n	8000508 <__aeabi_dadd+0xc4>
 800071a:	074b      	lsls	r3, r1, #29
 800071c:	08ca      	lsrs	r2, r1, #3
 800071e:	4948      	ldr	r1, [pc, #288]	; (8000840 <__aeabi_dadd+0x3fc>)
 8000720:	08ff      	lsrs	r7, r7, #3
 8000722:	433b      	orrs	r3, r7
 8000724:	428d      	cmp	r5, r1
 8000726:	d196      	bne.n	8000656 <__aeabi_dadd+0x212>
 8000728:	0019      	movs	r1, r3
 800072a:	4311      	orrs	r1, r2
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x2ec>
 800072e:	e19e      	b.n	8000a6e <__aeabi_dadd+0x62a>
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0309      	lsls	r1, r1, #12
 8000734:	430a      	orrs	r2, r1
 8000736:	0312      	lsls	r2, r2, #12
 8000738:	0b12      	lsrs	r2, r2, #12
 800073a:	4d41      	ldr	r5, [pc, #260]	; (8000840 <__aeabi_dadd+0x3fc>)
 800073c:	e78f      	b.n	800065e <__aeabi_dadd+0x21a>
 800073e:	0015      	movs	r5, r2
 8000740:	2200      	movs	r2, #0
 8000742:	2300      	movs	r3, #0
 8000744:	e78b      	b.n	800065e <__aeabi_dadd+0x21a>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d000      	beq.n	800074c <__aeabi_dadd+0x308>
 800074a:	e0c7      	b.n	80008dc <__aeabi_dadd+0x498>
 800074c:	1c6b      	adds	r3, r5, #1
 800074e:	055f      	lsls	r7, r3, #21
 8000750:	0d7f      	lsrs	r7, r7, #21
 8000752:	2f01      	cmp	r7, #1
 8000754:	dc00      	bgt.n	8000758 <__aeabi_dadd+0x314>
 8000756:	e0f1      	b.n	800093c <__aeabi_dadd+0x4f8>
 8000758:	4d39      	ldr	r5, [pc, #228]	; (8000840 <__aeabi_dadd+0x3fc>)
 800075a:	42ab      	cmp	r3, r5
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x31c>
 800075e:	e0b9      	b.n	80008d4 <__aeabi_dadd+0x490>
 8000760:	1885      	adds	r5, r0, r2
 8000762:	000a      	movs	r2, r1
 8000764:	4285      	cmp	r5, r0
 8000766:	4189      	sbcs	r1, r1
 8000768:	4442      	add	r2, r8
 800076a:	4249      	negs	r1, r1
 800076c:	1851      	adds	r1, r2, r1
 800076e:	2207      	movs	r2, #7
 8000770:	07cf      	lsls	r7, r1, #31
 8000772:	086d      	lsrs	r5, r5, #1
 8000774:	432f      	orrs	r7, r5
 8000776:	0849      	lsrs	r1, r1, #1
 8000778:	403a      	ands	r2, r7
 800077a:	001d      	movs	r5, r3
 800077c:	e6c2      	b.n	8000504 <__aeabi_dadd+0xc0>
 800077e:	2207      	movs	r2, #7
 8000780:	4930      	ldr	r1, [pc, #192]	; (8000844 <__aeabi_dadd+0x400>)
 8000782:	1aed      	subs	r5, r5, r3
 8000784:	4031      	ands	r1, r6
 8000786:	403a      	ands	r2, r7
 8000788:	e6bc      	b.n	8000504 <__aeabi_dadd+0xc0>
 800078a:	003e      	movs	r6, r7
 800078c:	3828      	subs	r0, #40	; 0x28
 800078e:	4086      	lsls	r6, r0
 8000790:	2700      	movs	r7, #0
 8000792:	e69f      	b.n	80004d4 <__aeabi_dadd+0x90>
 8000794:	0038      	movs	r0, r7
 8000796:	f000 fd83 	bl	80012a0 <__clzsi2>
 800079a:	3020      	adds	r0, #32
 800079c:	e68e      	b.n	80004bc <__aeabi_dadd+0x78>
 800079e:	4643      	mov	r3, r8
 80007a0:	4313      	orrs	r3, r2
 80007a2:	001f      	movs	r7, r3
 80007a4:	1e7a      	subs	r2, r7, #1
 80007a6:	4197      	sbcs	r7, r2
 80007a8:	1bc7      	subs	r7, r0, r7
 80007aa:	42b8      	cmp	r0, r7
 80007ac:	4180      	sbcs	r0, r0
 80007ae:	4240      	negs	r0, r0
 80007b0:	1a09      	subs	r1, r1, r0
 80007b2:	e678      	b.n	80004a6 <__aeabi_dadd+0x62>
 80007b4:	000e      	movs	r6, r1
 80007b6:	003b      	movs	r3, r7
 80007b8:	4306      	orrs	r6, r0
 80007ba:	4313      	orrs	r3, r2
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d161      	bne.n	8000884 <__aeabi_dadd+0x440>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x382>
 80007c4:	e0f4      	b.n	80009b0 <__aeabi_dadd+0x56c>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x388>
 80007ca:	e11b      	b.n	8000a04 <__aeabi_dadd+0x5c0>
 80007cc:	4664      	mov	r4, ip
 80007ce:	0039      	movs	r1, r7
 80007d0:	0010      	movs	r0, r2
 80007d2:	e739      	b.n	8000648 <__aeabi_dadd+0x204>
 80007d4:	4f1a      	ldr	r7, [pc, #104]	; (8000840 <__aeabi_dadd+0x3fc>)
 80007d6:	42bb      	cmp	r3, r7
 80007d8:	d07a      	beq.n	80008d0 <__aeabi_dadd+0x48c>
 80007da:	0033      	movs	r3, r6
 80007dc:	e6ff      	b.n	80005de <__aeabi_dadd+0x19a>
 80007de:	0030      	movs	r0, r6
 80007e0:	3d1f      	subs	r5, #31
 80007e2:	40e8      	lsrs	r0, r5
 80007e4:	2b20      	cmp	r3, #32
 80007e6:	d003      	beq.n	80007f0 <__aeabi_dadd+0x3ac>
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	1acb      	subs	r3, r1, r3
 80007ec:	409e      	lsls	r6, r3
 80007ee:	4337      	orrs	r7, r6
 80007f0:	1e7b      	subs	r3, r7, #1
 80007f2:	419f      	sbcs	r7, r3
 80007f4:	2207      	movs	r2, #7
 80007f6:	4307      	orrs	r7, r0
 80007f8:	403a      	ands	r2, r7
 80007fa:	2100      	movs	r1, #0
 80007fc:	2500      	movs	r5, #0
 80007fe:	e789      	b.n	8000714 <__aeabi_dadd+0x2d0>
 8000800:	1a17      	subs	r7, r2, r0
 8000802:	4643      	mov	r3, r8
 8000804:	42ba      	cmp	r2, r7
 8000806:	41b6      	sbcs	r6, r6
 8000808:	1a59      	subs	r1, r3, r1
 800080a:	4276      	negs	r6, r6
 800080c:	1b8e      	subs	r6, r1, r6
 800080e:	4664      	mov	r4, ip
 8000810:	e64e      	b.n	80004b0 <__aeabi_dadd+0x6c>
 8000812:	2b1f      	cmp	r3, #31
 8000814:	dd00      	ble.n	8000818 <__aeabi_dadd+0x3d4>
 8000816:	e0ad      	b.n	8000974 <__aeabi_dadd+0x530>
 8000818:	2620      	movs	r6, #32
 800081a:	4647      	mov	r7, r8
 800081c:	1af6      	subs	r6, r6, r3
 800081e:	40b7      	lsls	r7, r6
 8000820:	46b9      	mov	r9, r7
 8000822:	0017      	movs	r7, r2
 8000824:	46b2      	mov	sl, r6
 8000826:	40df      	lsrs	r7, r3
 8000828:	464e      	mov	r6, r9
 800082a:	433e      	orrs	r6, r7
 800082c:	0037      	movs	r7, r6
 800082e:	4656      	mov	r6, sl
 8000830:	40b2      	lsls	r2, r6
 8000832:	1e56      	subs	r6, r2, #1
 8000834:	41b2      	sbcs	r2, r6
 8000836:	4317      	orrs	r7, r2
 8000838:	4642      	mov	r2, r8
 800083a:	40da      	lsrs	r2, r3
 800083c:	1889      	adds	r1, r1, r2
 800083e:	e6ae      	b.n	800059e <__aeabi_dadd+0x15a>
 8000840:	000007ff 	.word	0x000007ff
 8000844:	ff7fffff 	.word	0xff7fffff
 8000848:	800fffff 	.word	0x800fffff
 800084c:	2620      	movs	r6, #32
 800084e:	4647      	mov	r7, r8
 8000850:	1af6      	subs	r6, r6, r3
 8000852:	40b7      	lsls	r7, r6
 8000854:	46b9      	mov	r9, r7
 8000856:	0017      	movs	r7, r2
 8000858:	46b2      	mov	sl, r6
 800085a:	40df      	lsrs	r7, r3
 800085c:	464e      	mov	r6, r9
 800085e:	433e      	orrs	r6, r7
 8000860:	0037      	movs	r7, r6
 8000862:	4656      	mov	r6, sl
 8000864:	40b2      	lsls	r2, r6
 8000866:	1e56      	subs	r6, r2, #1
 8000868:	41b2      	sbcs	r2, r6
 800086a:	4317      	orrs	r7, r2
 800086c:	4642      	mov	r2, r8
 800086e:	40da      	lsrs	r2, r3
 8000870:	1a89      	subs	r1, r1, r2
 8000872:	e799      	b.n	80007a8 <__aeabi_dadd+0x364>
 8000874:	4c7f      	ldr	r4, [pc, #508]	; (8000a74 <__aeabi_dadd+0x630>)
 8000876:	42a6      	cmp	r6, r4
 8000878:	d05b      	beq.n	8000932 <__aeabi_dadd+0x4ee>
 800087a:	2480      	movs	r4, #128	; 0x80
 800087c:	0424      	lsls	r4, r4, #16
 800087e:	425b      	negs	r3, r3
 8000880:	4321      	orrs	r1, r4
 8000882:	e727      	b.n	80006d4 <__aeabi_dadd+0x290>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d10c      	bne.n	80008a2 <__aeabi_dadd+0x45e>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x44a>
 800088c:	e0cb      	b.n	8000a26 <__aeabi_dadd+0x5e2>
 800088e:	4664      	mov	r4, ip
 8000890:	0039      	movs	r1, r7
 8000892:	0010      	movs	r0, r2
 8000894:	4d77      	ldr	r5, [pc, #476]	; (8000a74 <__aeabi_dadd+0x630>)
 8000896:	e6d7      	b.n	8000648 <__aeabi_dadd+0x204>
 8000898:	4f76      	ldr	r7, [pc, #472]	; (8000a74 <__aeabi_dadd+0x630>)
 800089a:	42bb      	cmp	r3, r7
 800089c:	d018      	beq.n	80008d0 <__aeabi_dadd+0x48c>
 800089e:	0033      	movs	r3, r6
 80008a0:	e675      	b.n	800058e <__aeabi_dadd+0x14a>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d014      	beq.n	80008d0 <__aeabi_dadd+0x48c>
 80008a6:	074b      	lsls	r3, r1, #29
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	4318      	orrs	r0, r3
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	08c9      	lsrs	r1, r1, #3
 80008b0:	031b      	lsls	r3, r3, #12
 80008b2:	4219      	tst	r1, r3
 80008b4:	d007      	beq.n	80008c6 <__aeabi_dadd+0x482>
 80008b6:	08fc      	lsrs	r4, r7, #3
 80008b8:	421c      	tst	r4, r3
 80008ba:	d104      	bne.n	80008c6 <__aeabi_dadd+0x482>
 80008bc:	0779      	lsls	r1, r7, #29
 80008be:	08d0      	lsrs	r0, r2, #3
 80008c0:	4308      	orrs	r0, r1
 80008c2:	46e1      	mov	r9, ip
 80008c4:	0021      	movs	r1, r4
 80008c6:	464c      	mov	r4, r9
 80008c8:	0f42      	lsrs	r2, r0, #29
 80008ca:	00c9      	lsls	r1, r1, #3
 80008cc:	4311      	orrs	r1, r2
 80008ce:	00c0      	lsls	r0, r0, #3
 80008d0:	4d68      	ldr	r5, [pc, #416]	; (8000a74 <__aeabi_dadd+0x630>)
 80008d2:	e6b9      	b.n	8000648 <__aeabi_dadd+0x204>
 80008d4:	001d      	movs	r5, r3
 80008d6:	2200      	movs	r2, #0
 80008d8:	2300      	movs	r3, #0
 80008da:	e6c0      	b.n	800065e <__aeabi_dadd+0x21a>
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d15b      	bne.n	8000998 <__aeabi_dadd+0x554>
 80008e0:	000d      	movs	r5, r1
 80008e2:	4305      	orrs	r5, r0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x4a4>
 80008e6:	e6e2      	b.n	80006ae <__aeabi_dadd+0x26a>
 80008e8:	1c5d      	adds	r5, r3, #1
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x4aa>
 80008ec:	e0b0      	b.n	8000a50 <__aeabi_dadd+0x60c>
 80008ee:	4d61      	ldr	r5, [pc, #388]	; (8000a74 <__aeabi_dadd+0x630>)
 80008f0:	42ae      	cmp	r6, r5
 80008f2:	d01f      	beq.n	8000934 <__aeabi_dadd+0x4f0>
 80008f4:	43db      	mvns	r3, r3
 80008f6:	2b38      	cmp	r3, #56	; 0x38
 80008f8:	dc71      	bgt.n	80009de <__aeabi_dadd+0x59a>
 80008fa:	2b1f      	cmp	r3, #31
 80008fc:	dd00      	ble.n	8000900 <__aeabi_dadd+0x4bc>
 80008fe:	e096      	b.n	8000a2e <__aeabi_dadd+0x5ea>
 8000900:	2520      	movs	r5, #32
 8000902:	000f      	movs	r7, r1
 8000904:	1aed      	subs	r5, r5, r3
 8000906:	40af      	lsls	r7, r5
 8000908:	46b9      	mov	r9, r7
 800090a:	0007      	movs	r7, r0
 800090c:	46aa      	mov	sl, r5
 800090e:	40df      	lsrs	r7, r3
 8000910:	464d      	mov	r5, r9
 8000912:	433d      	orrs	r5, r7
 8000914:	002f      	movs	r7, r5
 8000916:	4655      	mov	r5, sl
 8000918:	40a8      	lsls	r0, r5
 800091a:	40d9      	lsrs	r1, r3
 800091c:	1e45      	subs	r5, r0, #1
 800091e:	41a8      	sbcs	r0, r5
 8000920:	4488      	add	r8, r1
 8000922:	4307      	orrs	r7, r0
 8000924:	18bf      	adds	r7, r7, r2
 8000926:	4297      	cmp	r7, r2
 8000928:	4192      	sbcs	r2, r2
 800092a:	4251      	negs	r1, r2
 800092c:	4441      	add	r1, r8
 800092e:	0035      	movs	r5, r6
 8000930:	e63a      	b.n	80005a8 <__aeabi_dadd+0x164>
 8000932:	4664      	mov	r4, ip
 8000934:	0035      	movs	r5, r6
 8000936:	4641      	mov	r1, r8
 8000938:	0010      	movs	r0, r2
 800093a:	e685      	b.n	8000648 <__aeabi_dadd+0x204>
 800093c:	000b      	movs	r3, r1
 800093e:	4303      	orrs	r3, r0
 8000940:	2d00      	cmp	r5, #0
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x502>
 8000944:	e663      	b.n	800060e <__aeabi_dadd+0x1ca>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f5      	beq.n	8000936 <__aeabi_dadd+0x4f2>
 800094a:	4643      	mov	r3, r8
 800094c:	4313      	orrs	r3, r2
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x50e>
 8000950:	e67a      	b.n	8000648 <__aeabi_dadd+0x204>
 8000952:	1887      	adds	r7, r0, r2
 8000954:	4287      	cmp	r7, r0
 8000956:	4180      	sbcs	r0, r0
 8000958:	2207      	movs	r2, #7
 800095a:	4441      	add	r1, r8
 800095c:	4240      	negs	r0, r0
 800095e:	1809      	adds	r1, r1, r0
 8000960:	403a      	ands	r2, r7
 8000962:	020b      	lsls	r3, r1, #8
 8000964:	d400      	bmi.n	8000968 <__aeabi_dadd+0x524>
 8000966:	e6d5      	b.n	8000714 <__aeabi_dadd+0x2d0>
 8000968:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <__aeabi_dadd+0x634>)
 800096a:	3501      	adds	r5, #1
 800096c:	4019      	ands	r1, r3
 800096e:	e5c9      	b.n	8000504 <__aeabi_dadd+0xc0>
 8000970:	0038      	movs	r0, r7
 8000972:	e669      	b.n	8000648 <__aeabi_dadd+0x204>
 8000974:	001e      	movs	r6, r3
 8000976:	4647      	mov	r7, r8
 8000978:	3e20      	subs	r6, #32
 800097a:	40f7      	lsrs	r7, r6
 800097c:	46bc      	mov	ip, r7
 800097e:	2b20      	cmp	r3, #32
 8000980:	d004      	beq.n	800098c <__aeabi_dadd+0x548>
 8000982:	2640      	movs	r6, #64	; 0x40
 8000984:	1af3      	subs	r3, r6, r3
 8000986:	4646      	mov	r6, r8
 8000988:	409e      	lsls	r6, r3
 800098a:	4332      	orrs	r2, r6
 800098c:	0017      	movs	r7, r2
 800098e:	4663      	mov	r3, ip
 8000990:	1e7a      	subs	r2, r7, #1
 8000992:	4197      	sbcs	r7, r2
 8000994:	431f      	orrs	r7, r3
 8000996:	e602      	b.n	800059e <__aeabi_dadd+0x15a>
 8000998:	4d36      	ldr	r5, [pc, #216]	; (8000a74 <__aeabi_dadd+0x630>)
 800099a:	42ae      	cmp	r6, r5
 800099c:	d0ca      	beq.n	8000934 <__aeabi_dadd+0x4f0>
 800099e:	2580      	movs	r5, #128	; 0x80
 80009a0:	042d      	lsls	r5, r5, #16
 80009a2:	425b      	negs	r3, r3
 80009a4:	4329      	orrs	r1, r5
 80009a6:	e7a6      	b.n	80008f6 <__aeabi_dadd+0x4b2>
 80009a8:	4308      	orrs	r0, r1
 80009aa:	1e41      	subs	r1, r0, #1
 80009ac:	4188      	sbcs	r0, r1
 80009ae:	e6a6      	b.n	80006fe <__aeabi_dadd+0x2ba>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x572>
 80009b4:	e648      	b.n	8000648 <__aeabi_dadd+0x204>
 80009b6:	1a87      	subs	r7, r0, r2
 80009b8:	4643      	mov	r3, r8
 80009ba:	42b8      	cmp	r0, r7
 80009bc:	41b6      	sbcs	r6, r6
 80009be:	1acb      	subs	r3, r1, r3
 80009c0:	4276      	negs	r6, r6
 80009c2:	1b9e      	subs	r6, r3, r6
 80009c4:	0233      	lsls	r3, r6, #8
 80009c6:	d54b      	bpl.n	8000a60 <__aeabi_dadd+0x61c>
 80009c8:	1a17      	subs	r7, r2, r0
 80009ca:	4643      	mov	r3, r8
 80009cc:	42ba      	cmp	r2, r7
 80009ce:	4192      	sbcs	r2, r2
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	4252      	negs	r2, r2
 80009d4:	1a89      	subs	r1, r1, r2
 80009d6:	2207      	movs	r2, #7
 80009d8:	4664      	mov	r4, ip
 80009da:	403a      	ands	r2, r7
 80009dc:	e592      	b.n	8000504 <__aeabi_dadd+0xc0>
 80009de:	4301      	orrs	r1, r0
 80009e0:	000f      	movs	r7, r1
 80009e2:	1e79      	subs	r1, r7, #1
 80009e4:	418f      	sbcs	r7, r1
 80009e6:	e79d      	b.n	8000924 <__aeabi_dadd+0x4e0>
 80009e8:	001c      	movs	r4, r3
 80009ea:	000f      	movs	r7, r1
 80009ec:	3c20      	subs	r4, #32
 80009ee:	40e7      	lsrs	r7, r4
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d003      	beq.n	80009fc <__aeabi_dadd+0x5b8>
 80009f4:	2440      	movs	r4, #64	; 0x40
 80009f6:	1ae3      	subs	r3, r4, r3
 80009f8:	4099      	lsls	r1, r3
 80009fa:	4308      	orrs	r0, r1
 80009fc:	1e41      	subs	r1, r0, #1
 80009fe:	4188      	sbcs	r0, r1
 8000a00:	4338      	orrs	r0, r7
 8000a02:	e67c      	b.n	80006fe <__aeabi_dadd+0x2ba>
 8000a04:	2200      	movs	r2, #0
 8000a06:	2400      	movs	r4, #0
 8000a08:	e625      	b.n	8000656 <__aeabi_dadd+0x212>
 8000a0a:	1a17      	subs	r7, r2, r0
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	42ba      	cmp	r2, r7
 8000a10:	4192      	sbcs	r2, r2
 8000a12:	1a59      	subs	r1, r3, r1
 8000a14:	4252      	negs	r2, r2
 8000a16:	1a89      	subs	r1, r1, r2
 8000a18:	4664      	mov	r4, ip
 8000a1a:	0035      	movs	r5, r6
 8000a1c:	e543      	b.n	80004a6 <__aeabi_dadd+0x62>
 8000a1e:	4641      	mov	r1, r8
 8000a20:	0010      	movs	r0, r2
 8000a22:	4d14      	ldr	r5, [pc, #80]	; (8000a74 <__aeabi_dadd+0x630>)
 8000a24:	e610      	b.n	8000648 <__aeabi_dadd+0x204>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	2400      	movs	r4, #0
 8000a2a:	0312      	lsls	r2, r2, #12
 8000a2c:	e680      	b.n	8000730 <__aeabi_dadd+0x2ec>
 8000a2e:	001d      	movs	r5, r3
 8000a30:	000f      	movs	r7, r1
 8000a32:	3d20      	subs	r5, #32
 8000a34:	40ef      	lsrs	r7, r5
 8000a36:	46bc      	mov	ip, r7
 8000a38:	2b20      	cmp	r3, #32
 8000a3a:	d003      	beq.n	8000a44 <__aeabi_dadd+0x600>
 8000a3c:	2540      	movs	r5, #64	; 0x40
 8000a3e:	1aeb      	subs	r3, r5, r3
 8000a40:	4099      	lsls	r1, r3
 8000a42:	4308      	orrs	r0, r1
 8000a44:	0007      	movs	r7, r0
 8000a46:	4663      	mov	r3, ip
 8000a48:	1e78      	subs	r0, r7, #1
 8000a4a:	4187      	sbcs	r7, r0
 8000a4c:	431f      	orrs	r7, r3
 8000a4e:	e769      	b.n	8000924 <__aeabi_dadd+0x4e0>
 8000a50:	1887      	adds	r7, r0, r2
 8000a52:	4297      	cmp	r7, r2
 8000a54:	419b      	sbcs	r3, r3
 8000a56:	4441      	add	r1, r8
 8000a58:	425b      	negs	r3, r3
 8000a5a:	18c9      	adds	r1, r1, r3
 8000a5c:	0035      	movs	r5, r6
 8000a5e:	e5a3      	b.n	80005a8 <__aeabi_dadd+0x164>
 8000a60:	003b      	movs	r3, r7
 8000a62:	4333      	orrs	r3, r6
 8000a64:	d0ce      	beq.n	8000a04 <__aeabi_dadd+0x5c0>
 8000a66:	2207      	movs	r2, #7
 8000a68:	0031      	movs	r1, r6
 8000a6a:	403a      	ands	r2, r7
 8000a6c:	e652      	b.n	8000714 <__aeabi_dadd+0x2d0>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	001a      	movs	r2, r3
 8000a72:	e5f4      	b.n	800065e <__aeabi_dadd+0x21a>
 8000a74:	000007ff 	.word	0x000007ff
 8000a78:	ff7fffff 	.word	0xff7fffff

08000a7c <__aeabi_ddiv>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	4657      	mov	r7, sl
 8000a80:	46de      	mov	lr, fp
 8000a82:	464e      	mov	r6, r9
 8000a84:	4645      	mov	r5, r8
 8000a86:	b5e0      	push	{r5, r6, r7, lr}
 8000a88:	4683      	mov	fp, r0
 8000a8a:	0007      	movs	r7, r0
 8000a8c:	030e      	lsls	r6, r1, #12
 8000a8e:	0048      	lsls	r0, r1, #1
 8000a90:	b085      	sub	sp, #20
 8000a92:	4692      	mov	sl, r2
 8000a94:	001c      	movs	r4, r3
 8000a96:	0b36      	lsrs	r6, r6, #12
 8000a98:	0d40      	lsrs	r0, r0, #21
 8000a9a:	0fcd      	lsrs	r5, r1, #31
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_ddiv+0x26>
 8000aa0:	e09d      	b.n	8000bde <__aeabi_ddiv+0x162>
 8000aa2:	4b95      	ldr	r3, [pc, #596]	; (8000cf8 <__aeabi_ddiv+0x27c>)
 8000aa4:	4298      	cmp	r0, r3
 8000aa6:	d039      	beq.n	8000b1c <__aeabi_ddiv+0xa0>
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	00f6      	lsls	r6, r6, #3
 8000aac:	041b      	lsls	r3, r3, #16
 8000aae:	431e      	orrs	r6, r3
 8000ab0:	4a92      	ldr	r2, [pc, #584]	; (8000cfc <__aeabi_ddiv+0x280>)
 8000ab2:	0f7b      	lsrs	r3, r7, #29
 8000ab4:	4333      	orrs	r3, r6
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	4694      	mov	ip, r2
 8000aba:	0003      	movs	r3, r0
 8000abc:	4463      	add	r3, ip
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	00ff      	lsls	r7, r7, #3
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	0323      	lsls	r3, r4, #12
 8000aca:	0b1b      	lsrs	r3, r3, #12
 8000acc:	4698      	mov	r8, r3
 8000ace:	0063      	lsls	r3, r4, #1
 8000ad0:	0fe4      	lsrs	r4, r4, #31
 8000ad2:	4652      	mov	r2, sl
 8000ad4:	0d5b      	lsrs	r3, r3, #21
 8000ad6:	9401      	str	r4, [sp, #4]
 8000ad8:	d100      	bne.n	8000adc <__aeabi_ddiv+0x60>
 8000ada:	e0b3      	b.n	8000c44 <__aeabi_ddiv+0x1c8>
 8000adc:	4986      	ldr	r1, [pc, #536]	; (8000cf8 <__aeabi_ddiv+0x27c>)
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_ddiv+0x68>
 8000ae2:	e09e      	b.n	8000c22 <__aeabi_ddiv+0x1a6>
 8000ae4:	4642      	mov	r2, r8
 8000ae6:	00d1      	lsls	r1, r2, #3
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0412      	lsls	r2, r2, #16
 8000aec:	430a      	orrs	r2, r1
 8000aee:	4651      	mov	r1, sl
 8000af0:	0f49      	lsrs	r1, r1, #29
 8000af2:	4311      	orrs	r1, r2
 8000af4:	468b      	mov	fp, r1
 8000af6:	4981      	ldr	r1, [pc, #516]	; (8000cfc <__aeabi_ddiv+0x280>)
 8000af8:	4652      	mov	r2, sl
 8000afa:	468c      	mov	ip, r1
 8000afc:	9900      	ldr	r1, [sp, #0]
 8000afe:	4463      	add	r3, ip
 8000b00:	1acb      	subs	r3, r1, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	00d2      	lsls	r2, r2, #3
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	002b      	movs	r3, r5
 8000b0a:	4063      	eors	r3, r4
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	2e0f      	cmp	r6, #15
 8000b10:	d900      	bls.n	8000b14 <__aeabi_ddiv+0x98>
 8000b12:	e105      	b.n	8000d20 <__aeabi_ddiv+0x2a4>
 8000b14:	4b7a      	ldr	r3, [pc, #488]	; (8000d00 <__aeabi_ddiv+0x284>)
 8000b16:	00b6      	lsls	r6, r6, #2
 8000b18:	599b      	ldr	r3, [r3, r6]
 8000b1a:	469f      	mov	pc, r3
 8000b1c:	465b      	mov	r3, fp
 8000b1e:	4333      	orrs	r3, r6
 8000b20:	4699      	mov	r9, r3
 8000b22:	d000      	beq.n	8000b26 <__aeabi_ddiv+0xaa>
 8000b24:	e0b8      	b.n	8000c98 <__aeabi_ddiv+0x21c>
 8000b26:	2302      	movs	r3, #2
 8000b28:	2608      	movs	r6, #8
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	9000      	str	r0, [sp, #0]
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	e7ca      	b.n	8000ac8 <__aeabi_ddiv+0x4c>
 8000b32:	46cb      	mov	fp, r9
 8000b34:	003a      	movs	r2, r7
 8000b36:	9902      	ldr	r1, [sp, #8]
 8000b38:	9501      	str	r5, [sp, #4]
 8000b3a:	9b01      	ldr	r3, [sp, #4]
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	2902      	cmp	r1, #2
 8000b40:	d027      	beq.n	8000b92 <__aeabi_ddiv+0x116>
 8000b42:	2903      	cmp	r1, #3
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0xcc>
 8000b46:	e280      	b.n	800104a <__aeabi_ddiv+0x5ce>
 8000b48:	2901      	cmp	r1, #1
 8000b4a:	d044      	beq.n	8000bd6 <__aeabi_ddiv+0x15a>
 8000b4c:	496d      	ldr	r1, [pc, #436]	; (8000d04 <__aeabi_ddiv+0x288>)
 8000b4e:	9b00      	ldr	r3, [sp, #0]
 8000b50:	468c      	mov	ip, r1
 8000b52:	4463      	add	r3, ip
 8000b54:	001c      	movs	r4, r3
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	dd38      	ble.n	8000bcc <__aeabi_ddiv+0x150>
 8000b5a:	0753      	lsls	r3, r2, #29
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_ddiv+0xe4>
 8000b5e:	e213      	b.n	8000f88 <__aeabi_ddiv+0x50c>
 8000b60:	08d2      	lsrs	r2, r2, #3
 8000b62:	465b      	mov	r3, fp
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	d509      	bpl.n	8000b7c <__aeabi_ddiv+0x100>
 8000b68:	4659      	mov	r1, fp
 8000b6a:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <__aeabi_ddiv+0x28c>)
 8000b6c:	4019      	ands	r1, r3
 8000b6e:	468b      	mov	fp, r1
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	00c9      	lsls	r1, r1, #3
 8000b74:	468c      	mov	ip, r1
 8000b76:	9b00      	ldr	r3, [sp, #0]
 8000b78:	4463      	add	r3, ip
 8000b7a:	001c      	movs	r4, r3
 8000b7c:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <__aeabi_ddiv+0x290>)
 8000b7e:	429c      	cmp	r4, r3
 8000b80:	dc07      	bgt.n	8000b92 <__aeabi_ddiv+0x116>
 8000b82:	465b      	mov	r3, fp
 8000b84:	0564      	lsls	r4, r4, #21
 8000b86:	075f      	lsls	r7, r3, #29
 8000b88:	025b      	lsls	r3, r3, #9
 8000b8a:	4317      	orrs	r7, r2
 8000b8c:	0b1b      	lsrs	r3, r3, #12
 8000b8e:	0d62      	lsrs	r2, r4, #21
 8000b90:	e002      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2700      	movs	r7, #0
 8000b96:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <__aeabi_ddiv+0x27c>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	031b      	lsls	r3, r3, #12
 8000b9c:	0b1c      	lsrs	r4, r3, #12
 8000b9e:	0d0b      	lsrs	r3, r1, #20
 8000ba0:	051b      	lsls	r3, r3, #20
 8000ba2:	4323      	orrs	r3, r4
 8000ba4:	0514      	lsls	r4, r2, #20
 8000ba6:	4a5a      	ldr	r2, [pc, #360]	; (8000d10 <__aeabi_ddiv+0x294>)
 8000ba8:	0038      	movs	r0, r7
 8000baa:	4013      	ands	r3, r2
 8000bac:	431c      	orrs	r4, r3
 8000bae:	4653      	mov	r3, sl
 8000bb0:	0064      	lsls	r4, r4, #1
 8000bb2:	07db      	lsls	r3, r3, #31
 8000bb4:	0864      	lsrs	r4, r4, #1
 8000bb6:	431c      	orrs	r4, r3
 8000bb8:	0021      	movs	r1, r4
 8000bba:	b005      	add	sp, #20
 8000bbc:	bc3c      	pop	{r2, r3, r4, r5}
 8000bbe:	4690      	mov	r8, r2
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	46a2      	mov	sl, r4
 8000bc4:	46ab      	mov	fp, r5
 8000bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4252      	negs	r2, r2
 8000bcc:	2301      	movs	r3, #1
 8000bce:	1b1b      	subs	r3, r3, r4
 8000bd0:	2b38      	cmp	r3, #56	; 0x38
 8000bd2:	dc00      	bgt.n	8000bd6 <__aeabi_ddiv+0x15a>
 8000bd4:	e1ad      	b.n	8000f32 <__aeabi_ddiv+0x4b6>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2700      	movs	r7, #0
 8000bdc:	e7dc      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000bde:	465b      	mov	r3, fp
 8000be0:	4333      	orrs	r3, r6
 8000be2:	4699      	mov	r9, r3
 8000be4:	d05e      	beq.n	8000ca4 <__aeabi_ddiv+0x228>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_ddiv+0x170>
 8000bea:	e18a      	b.n	8000f02 <__aeabi_ddiv+0x486>
 8000bec:	0030      	movs	r0, r6
 8000bee:	f000 fb57 	bl	80012a0 <__clzsi2>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	3b0b      	subs	r3, #11
 8000bf6:	2b1c      	cmp	r3, #28
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_ddiv+0x180>
 8000bfa:	e17b      	b.n	8000ef4 <__aeabi_ddiv+0x478>
 8000bfc:	221d      	movs	r2, #29
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	465a      	mov	r2, fp
 8000c02:	0001      	movs	r1, r0
 8000c04:	40da      	lsrs	r2, r3
 8000c06:	3908      	subs	r1, #8
 8000c08:	408e      	lsls	r6, r1
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	465f      	mov	r7, fp
 8000c0e:	4333      	orrs	r3, r6
 8000c10:	4699      	mov	r9, r3
 8000c12:	408f      	lsls	r7, r1
 8000c14:	4b3f      	ldr	r3, [pc, #252]	; (8000d14 <__aeabi_ddiv+0x298>)
 8000c16:	2600      	movs	r6, #0
 8000c18:	1a1b      	subs	r3, r3, r0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	e752      	b.n	8000ac8 <__aeabi_ddiv+0x4c>
 8000c22:	4641      	mov	r1, r8
 8000c24:	4653      	mov	r3, sl
 8000c26:	430b      	orrs	r3, r1
 8000c28:	493b      	ldr	r1, [pc, #236]	; (8000d18 <__aeabi_ddiv+0x29c>)
 8000c2a:	469b      	mov	fp, r3
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	9b00      	ldr	r3, [sp, #0]
 8000c30:	4463      	add	r3, ip
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	465b      	mov	r3, fp
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d13b      	bne.n	8000cb2 <__aeabi_ddiv+0x236>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	2102      	movs	r1, #2
 8000c42:	e761      	b.n	8000b08 <__aeabi_ddiv+0x8c>
 8000c44:	4643      	mov	r3, r8
 8000c46:	4313      	orrs	r3, r2
 8000c48:	469b      	mov	fp, r3
 8000c4a:	d037      	beq.n	8000cbc <__aeabi_ddiv+0x240>
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0x1d8>
 8000c52:	e162      	b.n	8000f1a <__aeabi_ddiv+0x49e>
 8000c54:	4640      	mov	r0, r8
 8000c56:	f000 fb23 	bl	80012a0 <__clzsi2>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	3b0b      	subs	r3, #11
 8000c5e:	2b1c      	cmp	r3, #28
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_ddiv+0x1e8>
 8000c62:	e153      	b.n	8000f0c <__aeabi_ddiv+0x490>
 8000c64:	0002      	movs	r2, r0
 8000c66:	4641      	mov	r1, r8
 8000c68:	3a08      	subs	r2, #8
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	4688      	mov	r8, r1
 8000c6e:	211d      	movs	r1, #29
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	4651      	mov	r1, sl
 8000c74:	40d9      	lsrs	r1, r3
 8000c76:	000b      	movs	r3, r1
 8000c78:	4641      	mov	r1, r8
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	469b      	mov	fp, r3
 8000c7e:	4653      	mov	r3, sl
 8000c80:	4093      	lsls	r3, r2
 8000c82:	001a      	movs	r2, r3
 8000c84:	9b00      	ldr	r3, [sp, #0]
 8000c86:	4925      	ldr	r1, [pc, #148]	; (8000d1c <__aeabi_ddiv+0x2a0>)
 8000c88:	469c      	mov	ip, r3
 8000c8a:	4460      	add	r0, ip
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	468c      	mov	ip, r1
 8000c90:	4463      	add	r3, ip
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2100      	movs	r1, #0
 8000c96:	e737      	b.n	8000b08 <__aeabi_ddiv+0x8c>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	46b1      	mov	r9, r6
 8000c9c:	9000      	str	r0, [sp, #0]
 8000c9e:	260c      	movs	r6, #12
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	e711      	b.n	8000ac8 <__aeabi_ddiv+0x4c>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	2604      	movs	r6, #4
 8000cac:	2700      	movs	r7, #0
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	e70a      	b.n	8000ac8 <__aeabi_ddiv+0x4c>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	46c3      	mov	fp, r8
 8000cb6:	431e      	orrs	r6, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	e725      	b.n	8000b08 <__aeabi_ddiv+0x8c>
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	431e      	orrs	r6, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	e720      	b.n	8000b08 <__aeabi_ddiv+0x8c>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	469a      	mov	sl, r3
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	2700      	movs	r7, #0
 8000cce:	031b      	lsls	r3, r3, #12
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <__aeabi_ddiv+0x27c>)
 8000cd2:	e761      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	031b      	lsls	r3, r3, #12
 8000cda:	4219      	tst	r1, r3
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x264>
 8000cde:	e0e2      	b.n	8000ea6 <__aeabi_ddiv+0x42a>
 8000ce0:	4659      	mov	r1, fp
 8000ce2:	4219      	tst	r1, r3
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_ddiv+0x26c>
 8000ce6:	e0de      	b.n	8000ea6 <__aeabi_ddiv+0x42a>
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	031b      	lsls	r3, r3, #12
 8000cec:	0017      	movs	r7, r2
 8000cee:	0b1b      	lsrs	r3, r3, #12
 8000cf0:	46a2      	mov	sl, r4
 8000cf2:	4a01      	ldr	r2, [pc, #4]	; (8000cf8 <__aeabi_ddiv+0x27c>)
 8000cf4:	e750      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	000007ff 	.word	0x000007ff
 8000cfc:	fffffc01 	.word	0xfffffc01
 8000d00:	080039e8 	.word	0x080039e8
 8000d04:	000003ff 	.word	0x000003ff
 8000d08:	feffffff 	.word	0xfeffffff
 8000d0c:	000007fe 	.word	0x000007fe
 8000d10:	800fffff 	.word	0x800fffff
 8000d14:	fffffc0d 	.word	0xfffffc0d
 8000d18:	fffff801 	.word	0xfffff801
 8000d1c:	000003f3 	.word	0x000003f3
 8000d20:	45d9      	cmp	r9, fp
 8000d22:	d900      	bls.n	8000d26 <__aeabi_ddiv+0x2aa>
 8000d24:	e0cb      	b.n	8000ebe <__aeabi_ddiv+0x442>
 8000d26:	d100      	bne.n	8000d2a <__aeabi_ddiv+0x2ae>
 8000d28:	e0c6      	b.n	8000eb8 <__aeabi_ddiv+0x43c>
 8000d2a:	003c      	movs	r4, r7
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	2700      	movs	r7, #0
 8000d30:	9b00      	ldr	r3, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	465b      	mov	r3, fp
 8000d38:	0e16      	lsrs	r6, r2, #24
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	0213      	lsls	r3, r2, #8
 8000d40:	4698      	mov	r8, r3
 8000d42:	0433      	lsls	r3, r6, #16
 8000d44:	0c1b      	lsrs	r3, r3, #16
 8000d46:	4699      	mov	r9, r3
 8000d48:	0c31      	lsrs	r1, r6, #16
 8000d4a:	9101      	str	r1, [sp, #4]
 8000d4c:	f7ff fa62 	bl	8000214 <__aeabi_uidivmod>
 8000d50:	464a      	mov	r2, r9
 8000d52:	4342      	muls	r2, r0
 8000d54:	040b      	lsls	r3, r1, #16
 8000d56:	0c21      	lsrs	r1, r4, #16
 8000d58:	0005      	movs	r5, r0
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	d907      	bls.n	8000d70 <__aeabi_ddiv+0x2f4>
 8000d60:	1989      	adds	r1, r1, r6
 8000d62:	3d01      	subs	r5, #1
 8000d64:	428e      	cmp	r6, r1
 8000d66:	d803      	bhi.n	8000d70 <__aeabi_ddiv+0x2f4>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d901      	bls.n	8000d70 <__aeabi_ddiv+0x2f4>
 8000d6c:	1e85      	subs	r5, r0, #2
 8000d6e:	1989      	adds	r1, r1, r6
 8000d70:	1a88      	subs	r0, r1, r2
 8000d72:	9901      	ldr	r1, [sp, #4]
 8000d74:	f7ff fa4e 	bl	8000214 <__aeabi_uidivmod>
 8000d78:	0409      	lsls	r1, r1, #16
 8000d7a:	468c      	mov	ip, r1
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	0421      	lsls	r1, r4, #16
 8000d80:	4664      	mov	r4, ip
 8000d82:	4342      	muls	r2, r0
 8000d84:	0c09      	lsrs	r1, r1, #16
 8000d86:	0003      	movs	r3, r0
 8000d88:	4321      	orrs	r1, r4
 8000d8a:	428a      	cmp	r2, r1
 8000d8c:	d904      	bls.n	8000d98 <__aeabi_ddiv+0x31c>
 8000d8e:	1989      	adds	r1, r1, r6
 8000d90:	3b01      	subs	r3, #1
 8000d92:	428e      	cmp	r6, r1
 8000d94:	d800      	bhi.n	8000d98 <__aeabi_ddiv+0x31c>
 8000d96:	e0f1      	b.n	8000f7c <__aeabi_ddiv+0x500>
 8000d98:	042d      	lsls	r5, r5, #16
 8000d9a:	431d      	orrs	r5, r3
 8000d9c:	46ab      	mov	fp, r5
 8000d9e:	4643      	mov	r3, r8
 8000da0:	1a89      	subs	r1, r1, r2
 8000da2:	4642      	mov	r2, r8
 8000da4:	0c28      	lsrs	r0, r5, #16
 8000da6:	0412      	lsls	r2, r2, #16
 8000da8:	0c1d      	lsrs	r5, r3, #16
 8000daa:	465b      	mov	r3, fp
 8000dac:	0c14      	lsrs	r4, r2, #16
 8000dae:	0022      	movs	r2, r4
 8000db0:	041b      	lsls	r3, r3, #16
 8000db2:	0c1b      	lsrs	r3, r3, #16
 8000db4:	435a      	muls	r2, r3
 8000db6:	9403      	str	r4, [sp, #12]
 8000db8:	436b      	muls	r3, r5
 8000dba:	4344      	muls	r4, r0
 8000dbc:	9502      	str	r5, [sp, #8]
 8000dbe:	4368      	muls	r0, r5
 8000dc0:	191b      	adds	r3, r3, r4
 8000dc2:	0c15      	lsrs	r5, r2, #16
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	d903      	bls.n	8000dd2 <__aeabi_ddiv+0x356>
 8000dca:	2480      	movs	r4, #128	; 0x80
 8000dcc:	0264      	lsls	r4, r4, #9
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	4460      	add	r0, ip
 8000dd2:	0c1c      	lsrs	r4, r3, #16
 8000dd4:	0415      	lsls	r5, r2, #16
 8000dd6:	041b      	lsls	r3, r3, #16
 8000dd8:	0c2d      	lsrs	r5, r5, #16
 8000dda:	1820      	adds	r0, r4, r0
 8000ddc:	195d      	adds	r5, r3, r5
 8000dde:	4281      	cmp	r1, r0
 8000de0:	d377      	bcc.n	8000ed2 <__aeabi_ddiv+0x456>
 8000de2:	d073      	beq.n	8000ecc <__aeabi_ddiv+0x450>
 8000de4:	1a0c      	subs	r4, r1, r0
 8000de6:	4aa2      	ldr	r2, [pc, #648]	; (8001070 <__aeabi_ddiv+0x5f4>)
 8000de8:	1b7d      	subs	r5, r7, r5
 8000dea:	42af      	cmp	r7, r5
 8000dec:	41bf      	sbcs	r7, r7
 8000dee:	4694      	mov	ip, r2
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	427f      	negs	r7, r7
 8000df4:	4463      	add	r3, ip
 8000df6:	1be0      	subs	r0, r4, r7
 8000df8:	001c      	movs	r4, r3
 8000dfa:	4286      	cmp	r6, r0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x384>
 8000dfe:	e0db      	b.n	8000fb8 <__aeabi_ddiv+0x53c>
 8000e00:	9901      	ldr	r1, [sp, #4]
 8000e02:	f7ff fa07 	bl	8000214 <__aeabi_uidivmod>
 8000e06:	464a      	mov	r2, r9
 8000e08:	4342      	muls	r2, r0
 8000e0a:	040b      	lsls	r3, r1, #16
 8000e0c:	0c29      	lsrs	r1, r5, #16
 8000e0e:	0007      	movs	r7, r0
 8000e10:	4319      	orrs	r1, r3
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d907      	bls.n	8000e26 <__aeabi_ddiv+0x3aa>
 8000e16:	1989      	adds	r1, r1, r6
 8000e18:	3f01      	subs	r7, #1
 8000e1a:	428e      	cmp	r6, r1
 8000e1c:	d803      	bhi.n	8000e26 <__aeabi_ddiv+0x3aa>
 8000e1e:	428a      	cmp	r2, r1
 8000e20:	d901      	bls.n	8000e26 <__aeabi_ddiv+0x3aa>
 8000e22:	1e87      	subs	r7, r0, #2
 8000e24:	1989      	adds	r1, r1, r6
 8000e26:	1a88      	subs	r0, r1, r2
 8000e28:	9901      	ldr	r1, [sp, #4]
 8000e2a:	f7ff f9f3 	bl	8000214 <__aeabi_uidivmod>
 8000e2e:	0409      	lsls	r1, r1, #16
 8000e30:	464a      	mov	r2, r9
 8000e32:	4689      	mov	r9, r1
 8000e34:	0429      	lsls	r1, r5, #16
 8000e36:	464d      	mov	r5, r9
 8000e38:	4342      	muls	r2, r0
 8000e3a:	0c09      	lsrs	r1, r1, #16
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	4329      	orrs	r1, r5
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d907      	bls.n	8000e54 <__aeabi_ddiv+0x3d8>
 8000e44:	1989      	adds	r1, r1, r6
 8000e46:	3b01      	subs	r3, #1
 8000e48:	428e      	cmp	r6, r1
 8000e4a:	d803      	bhi.n	8000e54 <__aeabi_ddiv+0x3d8>
 8000e4c:	428a      	cmp	r2, r1
 8000e4e:	d901      	bls.n	8000e54 <__aeabi_ddiv+0x3d8>
 8000e50:	1e83      	subs	r3, r0, #2
 8000e52:	1989      	adds	r1, r1, r6
 8000e54:	043f      	lsls	r7, r7, #16
 8000e56:	1a89      	subs	r1, r1, r2
 8000e58:	003a      	movs	r2, r7
 8000e5a:	9f03      	ldr	r7, [sp, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	0038      	movs	r0, r7
 8000e60:	0413      	lsls	r3, r2, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	4358      	muls	r0, r3
 8000e66:	4681      	mov	r9, r0
 8000e68:	9802      	ldr	r0, [sp, #8]
 8000e6a:	0c15      	lsrs	r5, r2, #16
 8000e6c:	436f      	muls	r7, r5
 8000e6e:	4343      	muls	r3, r0
 8000e70:	4345      	muls	r5, r0
 8000e72:	4648      	mov	r0, r9
 8000e74:	0c00      	lsrs	r0, r0, #16
 8000e76:	4684      	mov	ip, r0
 8000e78:	19db      	adds	r3, r3, r7
 8000e7a:	4463      	add	r3, ip
 8000e7c:	429f      	cmp	r7, r3
 8000e7e:	d903      	bls.n	8000e88 <__aeabi_ddiv+0x40c>
 8000e80:	2080      	movs	r0, #128	; 0x80
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	4684      	mov	ip, r0
 8000e86:	4465      	add	r5, ip
 8000e88:	4648      	mov	r0, r9
 8000e8a:	0c1f      	lsrs	r7, r3, #16
 8000e8c:	0400      	lsls	r0, r0, #16
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	0c00      	lsrs	r0, r0, #16
 8000e92:	197d      	adds	r5, r7, r5
 8000e94:	1818      	adds	r0, r3, r0
 8000e96:	42a9      	cmp	r1, r5
 8000e98:	d200      	bcs.n	8000e9c <__aeabi_ddiv+0x420>
 8000e9a:	e084      	b.n	8000fa6 <__aeabi_ddiv+0x52a>
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x424>
 8000e9e:	e07f      	b.n	8000fa0 <__aeabi_ddiv+0x524>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	e657      	b.n	8000b56 <__aeabi_ddiv+0xda>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	031b      	lsls	r3, r3, #12
 8000eac:	4313      	orrs	r3, r2
 8000eae:	031b      	lsls	r3, r3, #12
 8000eb0:	0b1b      	lsrs	r3, r3, #12
 8000eb2:	46aa      	mov	sl, r5
 8000eb4:	4a6f      	ldr	r2, [pc, #444]	; (8001074 <__aeabi_ddiv+0x5f8>)
 8000eb6:	e66f      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000eb8:	42ba      	cmp	r2, r7
 8000eba:	d900      	bls.n	8000ebe <__aeabi_ddiv+0x442>
 8000ebc:	e735      	b.n	8000d2a <__aeabi_ddiv+0x2ae>
 8000ebe:	464b      	mov	r3, r9
 8000ec0:	07dc      	lsls	r4, r3, #31
 8000ec2:	0858      	lsrs	r0, r3, #1
 8000ec4:	087b      	lsrs	r3, r7, #1
 8000ec6:	431c      	orrs	r4, r3
 8000ec8:	07ff      	lsls	r7, r7, #31
 8000eca:	e734      	b.n	8000d36 <__aeabi_ddiv+0x2ba>
 8000ecc:	2400      	movs	r4, #0
 8000ece:	42af      	cmp	r7, r5
 8000ed0:	d289      	bcs.n	8000de6 <__aeabi_ddiv+0x36a>
 8000ed2:	4447      	add	r7, r8
 8000ed4:	4547      	cmp	r7, r8
 8000ed6:	41a4      	sbcs	r4, r4
 8000ed8:	465b      	mov	r3, fp
 8000eda:	4264      	negs	r4, r4
 8000edc:	19a4      	adds	r4, r4, r6
 8000ede:	1864      	adds	r4, r4, r1
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	42a6      	cmp	r6, r4
 8000ee4:	d21e      	bcs.n	8000f24 <__aeabi_ddiv+0x4a8>
 8000ee6:	42a0      	cmp	r0, r4
 8000ee8:	d86d      	bhi.n	8000fc6 <__aeabi_ddiv+0x54a>
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x472>
 8000eec:	e0b6      	b.n	800105c <__aeabi_ddiv+0x5e0>
 8000eee:	1a24      	subs	r4, r4, r0
 8000ef0:	469b      	mov	fp, r3
 8000ef2:	e778      	b.n	8000de6 <__aeabi_ddiv+0x36a>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	465a      	mov	r2, fp
 8000ef8:	3b28      	subs	r3, #40	; 0x28
 8000efa:	409a      	lsls	r2, r3
 8000efc:	2700      	movs	r7, #0
 8000efe:	4691      	mov	r9, r2
 8000f00:	e688      	b.n	8000c14 <__aeabi_ddiv+0x198>
 8000f02:	4658      	mov	r0, fp
 8000f04:	f000 f9cc 	bl	80012a0 <__clzsi2>
 8000f08:	3020      	adds	r0, #32
 8000f0a:	e672      	b.n	8000bf2 <__aeabi_ddiv+0x176>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4652      	mov	r2, sl
 8000f10:	3b28      	subs	r3, #40	; 0x28
 8000f12:	409a      	lsls	r2, r3
 8000f14:	4693      	mov	fp, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	e6b4      	b.n	8000c84 <__aeabi_ddiv+0x208>
 8000f1a:	4650      	mov	r0, sl
 8000f1c:	f000 f9c0 	bl	80012a0 <__clzsi2>
 8000f20:	3020      	adds	r0, #32
 8000f22:	e69a      	b.n	8000c5a <__aeabi_ddiv+0x1de>
 8000f24:	42a6      	cmp	r6, r4
 8000f26:	d1e2      	bne.n	8000eee <__aeabi_ddiv+0x472>
 8000f28:	45b8      	cmp	r8, r7
 8000f2a:	d9dc      	bls.n	8000ee6 <__aeabi_ddiv+0x46a>
 8000f2c:	1a34      	subs	r4, r6, r0
 8000f2e:	469b      	mov	fp, r3
 8000f30:	e759      	b.n	8000de6 <__aeabi_ddiv+0x36a>
 8000f32:	2b1f      	cmp	r3, #31
 8000f34:	dc65      	bgt.n	8001002 <__aeabi_ddiv+0x586>
 8000f36:	4c50      	ldr	r4, [pc, #320]	; (8001078 <__aeabi_ddiv+0x5fc>)
 8000f38:	9900      	ldr	r1, [sp, #0]
 8000f3a:	46a4      	mov	ip, r4
 8000f3c:	465c      	mov	r4, fp
 8000f3e:	4461      	add	r1, ip
 8000f40:	0008      	movs	r0, r1
 8000f42:	408c      	lsls	r4, r1
 8000f44:	0011      	movs	r1, r2
 8000f46:	4082      	lsls	r2, r0
 8000f48:	40d9      	lsrs	r1, r3
 8000f4a:	1e50      	subs	r0, r2, #1
 8000f4c:	4182      	sbcs	r2, r0
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	4314      	orrs	r4, r2
 8000f52:	465a      	mov	r2, fp
 8000f54:	40da      	lsrs	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	0762      	lsls	r2, r4, #29
 8000f5a:	d009      	beq.n	8000f70 <__aeabi_ddiv+0x4f4>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	4022      	ands	r2, r4
 8000f60:	2a04      	cmp	r2, #4
 8000f62:	d005      	beq.n	8000f70 <__aeabi_ddiv+0x4f4>
 8000f64:	0022      	movs	r2, r4
 8000f66:	1d14      	adds	r4, r2, #4
 8000f68:	4294      	cmp	r4, r2
 8000f6a:	4189      	sbcs	r1, r1
 8000f6c:	4249      	negs	r1, r1
 8000f6e:	185b      	adds	r3, r3, r1
 8000f70:	021a      	lsls	r2, r3, #8
 8000f72:	d562      	bpl.n	800103a <__aeabi_ddiv+0x5be>
 8000f74:	2201      	movs	r2, #1
 8000f76:	2300      	movs	r3, #0
 8000f78:	2700      	movs	r7, #0
 8000f7a:	e60d      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d800      	bhi.n	8000f82 <__aeabi_ddiv+0x506>
 8000f80:	e70a      	b.n	8000d98 <__aeabi_ddiv+0x31c>
 8000f82:	1e83      	subs	r3, r0, #2
 8000f84:	1989      	adds	r1, r1, r6
 8000f86:	e707      	b.n	8000d98 <__aeabi_ddiv+0x31c>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_ddiv+0x516>
 8000f90:	e5e6      	b.n	8000b60 <__aeabi_ddiv+0xe4>
 8000f92:	1d17      	adds	r7, r2, #4
 8000f94:	4297      	cmp	r7, r2
 8000f96:	4192      	sbcs	r2, r2
 8000f98:	4253      	negs	r3, r2
 8000f9a:	449b      	add	fp, r3
 8000f9c:	08fa      	lsrs	r2, r7, #3
 8000f9e:	e5e0      	b.n	8000b62 <__aeabi_ddiv+0xe6>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x52a>
 8000fa4:	e5d7      	b.n	8000b56 <__aeabi_ddiv+0xda>
 8000fa6:	1871      	adds	r1, r6, r1
 8000fa8:	1e53      	subs	r3, r2, #1
 8000faa:	42b1      	cmp	r1, r6
 8000fac:	d327      	bcc.n	8000ffe <__aeabi_ddiv+0x582>
 8000fae:	42a9      	cmp	r1, r5
 8000fb0:	d315      	bcc.n	8000fde <__aeabi_ddiv+0x562>
 8000fb2:	d058      	beq.n	8001066 <__aeabi_ddiv+0x5ea>
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	e773      	b.n	8000ea0 <__aeabi_ddiv+0x424>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_ddiv+0x542>
 8000fbc:	e604      	b.n	8000bc8 <__aeabi_ddiv+0x14c>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	449b      	add	fp, r3
 8000fc4:	e5cd      	b.n	8000b62 <__aeabi_ddiv+0xe6>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	4447      	add	r7, r8
 8000fca:	4547      	cmp	r7, r8
 8000fcc:	4189      	sbcs	r1, r1
 8000fce:	425b      	negs	r3, r3
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	4249      	negs	r1, r1
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	190c      	adds	r4, r1, r4
 8000fd8:	44e3      	add	fp, ip
 8000fda:	1a24      	subs	r4, r4, r0
 8000fdc:	e703      	b.n	8000de6 <__aeabi_ddiv+0x36a>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	005f      	lsls	r7, r3, #1
 8000fe2:	4547      	cmp	r7, r8
 8000fe4:	419b      	sbcs	r3, r3
 8000fe6:	46b8      	mov	r8, r7
 8000fe8:	425b      	negs	r3, r3
 8000fea:	199e      	adds	r6, r3, r6
 8000fec:	3a02      	subs	r2, #2
 8000fee:	1989      	adds	r1, r1, r6
 8000ff0:	42a9      	cmp	r1, r5
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_ddiv+0x57a>
 8000ff4:	e754      	b.n	8000ea0 <__aeabi_ddiv+0x424>
 8000ff6:	4540      	cmp	r0, r8
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_ddiv+0x580>
 8000ffa:	e751      	b.n	8000ea0 <__aeabi_ddiv+0x424>
 8000ffc:	e5ab      	b.n	8000b56 <__aeabi_ddiv+0xda>
 8000ffe:	001a      	movs	r2, r3
 8001000:	e7f6      	b.n	8000ff0 <__aeabi_ddiv+0x574>
 8001002:	211f      	movs	r1, #31
 8001004:	465f      	mov	r7, fp
 8001006:	4249      	negs	r1, r1
 8001008:	1b0c      	subs	r4, r1, r4
 800100a:	40e7      	lsrs	r7, r4
 800100c:	2b20      	cmp	r3, #32
 800100e:	d007      	beq.n	8001020 <__aeabi_ddiv+0x5a4>
 8001010:	491a      	ldr	r1, [pc, #104]	; (800107c <__aeabi_ddiv+0x600>)
 8001012:	9b00      	ldr	r3, [sp, #0]
 8001014:	468c      	mov	ip, r1
 8001016:	4463      	add	r3, ip
 8001018:	0018      	movs	r0, r3
 800101a:	465b      	mov	r3, fp
 800101c:	4083      	lsls	r3, r0
 800101e:	431a      	orrs	r2, r3
 8001020:	1e50      	subs	r0, r2, #1
 8001022:	4182      	sbcs	r2, r0
 8001024:	433a      	orrs	r2, r7
 8001026:	2707      	movs	r7, #7
 8001028:	2300      	movs	r3, #0
 800102a:	4017      	ands	r7, r2
 800102c:	d009      	beq.n	8001042 <__aeabi_ddiv+0x5c6>
 800102e:	210f      	movs	r1, #15
 8001030:	2300      	movs	r3, #0
 8001032:	4011      	ands	r1, r2
 8001034:	0014      	movs	r4, r2
 8001036:	2904      	cmp	r1, #4
 8001038:	d195      	bne.n	8000f66 <__aeabi_ddiv+0x4ea>
 800103a:	0022      	movs	r2, r4
 800103c:	075f      	lsls	r7, r3, #29
 800103e:	025b      	lsls	r3, r3, #9
 8001040:	0b1b      	lsrs	r3, r3, #12
 8001042:	08d2      	lsrs	r2, r2, #3
 8001044:	4317      	orrs	r7, r2
 8001046:	2200      	movs	r2, #0
 8001048:	e5a6      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	4659      	mov	r1, fp
 800104e:	031b      	lsls	r3, r3, #12
 8001050:	430b      	orrs	r3, r1
 8001052:	031b      	lsls	r3, r3, #12
 8001054:	0017      	movs	r7, r2
 8001056:	0b1b      	lsrs	r3, r3, #12
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <__aeabi_ddiv+0x5f8>)
 800105a:	e59d      	b.n	8000b98 <__aeabi_ddiv+0x11c>
 800105c:	42bd      	cmp	r5, r7
 800105e:	d8b2      	bhi.n	8000fc6 <__aeabi_ddiv+0x54a>
 8001060:	469b      	mov	fp, r3
 8001062:	2400      	movs	r4, #0
 8001064:	e6bf      	b.n	8000de6 <__aeabi_ddiv+0x36a>
 8001066:	4580      	cmp	r8, r0
 8001068:	d3b9      	bcc.n	8000fde <__aeabi_ddiv+0x562>
 800106a:	001a      	movs	r2, r3
 800106c:	e7c3      	b.n	8000ff6 <__aeabi_ddiv+0x57a>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	000003ff 	.word	0x000003ff
 8001074:	000007ff 	.word	0x000007ff
 8001078:	0000041e 	.word	0x0000041e
 800107c:	0000043e 	.word	0x0000043e

08001080 <__aeabi_i2d>:
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	2800      	cmp	r0, #0
 8001084:	d02d      	beq.n	80010e2 <__aeabi_i2d+0x62>
 8001086:	17c3      	asrs	r3, r0, #31
 8001088:	18c5      	adds	r5, r0, r3
 800108a:	405d      	eors	r5, r3
 800108c:	0fc4      	lsrs	r4, r0, #31
 800108e:	0028      	movs	r0, r5
 8001090:	f000 f906 	bl	80012a0 <__clzsi2>
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <__aeabi_i2d+0x6c>)
 8001096:	1a1b      	subs	r3, r3, r0
 8001098:	055b      	lsls	r3, r3, #21
 800109a:	0d5b      	lsrs	r3, r3, #21
 800109c:	280a      	cmp	r0, #10
 800109e:	dd15      	ble.n	80010cc <__aeabi_i2d+0x4c>
 80010a0:	380b      	subs	r0, #11
 80010a2:	4085      	lsls	r5, r0
 80010a4:	2200      	movs	r2, #0
 80010a6:	032d      	lsls	r5, r5, #12
 80010a8:	0b2d      	lsrs	r5, r5, #12
 80010aa:	2100      	movs	r1, #0
 80010ac:	0010      	movs	r0, r2
 80010ae:	032d      	lsls	r5, r5, #12
 80010b0:	0d0a      	lsrs	r2, r1, #20
 80010b2:	0b2d      	lsrs	r5, r5, #12
 80010b4:	0512      	lsls	r2, r2, #20
 80010b6:	432a      	orrs	r2, r5
 80010b8:	4d0d      	ldr	r5, [pc, #52]	; (80010f0 <__aeabi_i2d+0x70>)
 80010ba:	051b      	lsls	r3, r3, #20
 80010bc:	402a      	ands	r2, r5
 80010be:	4313      	orrs	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	07e4      	lsls	r4, r4, #31
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	4323      	orrs	r3, r4
 80010c8:	0019      	movs	r1, r3
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	0002      	movs	r2, r0
 80010ce:	0029      	movs	r1, r5
 80010d0:	3215      	adds	r2, #21
 80010d2:	4091      	lsls	r1, r2
 80010d4:	000a      	movs	r2, r1
 80010d6:	210b      	movs	r1, #11
 80010d8:	1a08      	subs	r0, r1, r0
 80010da:	40c5      	lsrs	r5, r0
 80010dc:	032d      	lsls	r5, r5, #12
 80010de:	0b2d      	lsrs	r5, r5, #12
 80010e0:	e7e3      	b.n	80010aa <__aeabi_i2d+0x2a>
 80010e2:	2400      	movs	r4, #0
 80010e4:	2300      	movs	r3, #0
 80010e6:	2500      	movs	r5, #0
 80010e8:	2200      	movs	r2, #0
 80010ea:	e7de      	b.n	80010aa <__aeabi_i2d+0x2a>
 80010ec:	0000041e 	.word	0x0000041e
 80010f0:	800fffff 	.word	0x800fffff

080010f4 <__aeabi_f2d>:
 80010f4:	0041      	lsls	r1, r0, #1
 80010f6:	0e09      	lsrs	r1, r1, #24
 80010f8:	1c4b      	adds	r3, r1, #1
 80010fa:	b570      	push	{r4, r5, r6, lr}
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	0246      	lsls	r6, r0, #9
 8001100:	0a75      	lsrs	r5, r6, #9
 8001102:	0fc4      	lsrs	r4, r0, #31
 8001104:	2b01      	cmp	r3, #1
 8001106:	dd14      	ble.n	8001132 <__aeabi_f2d+0x3e>
 8001108:	23e0      	movs	r3, #224	; 0xe0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	076d      	lsls	r5, r5, #29
 800110e:	0b36      	lsrs	r6, r6, #12
 8001110:	18cb      	adds	r3, r1, r3
 8001112:	2100      	movs	r1, #0
 8001114:	0d0a      	lsrs	r2, r1, #20
 8001116:	0028      	movs	r0, r5
 8001118:	0512      	lsls	r2, r2, #20
 800111a:	4d1c      	ldr	r5, [pc, #112]	; (800118c <__aeabi_f2d+0x98>)
 800111c:	4332      	orrs	r2, r6
 800111e:	055b      	lsls	r3, r3, #21
 8001120:	402a      	ands	r2, r5
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	4313      	orrs	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	07e4      	lsls	r4, r4, #31
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	4323      	orrs	r3, r4
 800112e:	0019      	movs	r1, r3
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	2900      	cmp	r1, #0
 8001134:	d114      	bne.n	8001160 <__aeabi_f2d+0x6c>
 8001136:	2d00      	cmp	r5, #0
 8001138:	d01e      	beq.n	8001178 <__aeabi_f2d+0x84>
 800113a:	0028      	movs	r0, r5
 800113c:	f000 f8b0 	bl	80012a0 <__clzsi2>
 8001140:	280a      	cmp	r0, #10
 8001142:	dc1c      	bgt.n	800117e <__aeabi_f2d+0x8a>
 8001144:	230b      	movs	r3, #11
 8001146:	002a      	movs	r2, r5
 8001148:	1a1b      	subs	r3, r3, r0
 800114a:	40da      	lsrs	r2, r3
 800114c:	0003      	movs	r3, r0
 800114e:	3315      	adds	r3, #21
 8001150:	409d      	lsls	r5, r3
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <__aeabi_f2d+0x9c>)
 8001154:	0312      	lsls	r2, r2, #12
 8001156:	1a1b      	subs	r3, r3, r0
 8001158:	055b      	lsls	r3, r3, #21
 800115a:	0b16      	lsrs	r6, r2, #12
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	e7d8      	b.n	8001112 <__aeabi_f2d+0x1e>
 8001160:	2d00      	cmp	r5, #0
 8001162:	d006      	beq.n	8001172 <__aeabi_f2d+0x7e>
 8001164:	0b32      	lsrs	r2, r6, #12
 8001166:	2680      	movs	r6, #128	; 0x80
 8001168:	0336      	lsls	r6, r6, #12
 800116a:	076d      	lsls	r5, r5, #29
 800116c:	4316      	orrs	r6, r2
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <__aeabi_f2d+0xa0>)
 8001170:	e7cf      	b.n	8001112 <__aeabi_f2d+0x1e>
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <__aeabi_f2d+0xa0>)
 8001174:	2600      	movs	r6, #0
 8001176:	e7cc      	b.n	8001112 <__aeabi_f2d+0x1e>
 8001178:	2300      	movs	r3, #0
 800117a:	2600      	movs	r6, #0
 800117c:	e7c9      	b.n	8001112 <__aeabi_f2d+0x1e>
 800117e:	0003      	movs	r3, r0
 8001180:	002a      	movs	r2, r5
 8001182:	3b0b      	subs	r3, #11
 8001184:	409a      	lsls	r2, r3
 8001186:	2500      	movs	r5, #0
 8001188:	e7e3      	b.n	8001152 <__aeabi_f2d+0x5e>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	800fffff 	.word	0x800fffff
 8001190:	00000389 	.word	0x00000389
 8001194:	000007ff 	.word	0x000007ff

08001198 <__aeabi_d2f>:
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	004c      	lsls	r4, r1, #1
 800119c:	0d64      	lsrs	r4, r4, #21
 800119e:	030b      	lsls	r3, r1, #12
 80011a0:	1c62      	adds	r2, r4, #1
 80011a2:	0a5b      	lsrs	r3, r3, #9
 80011a4:	0f46      	lsrs	r6, r0, #29
 80011a6:	0552      	lsls	r2, r2, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	431e      	orrs	r6, r3
 80011ac:	00c5      	lsls	r5, r0, #3
 80011ae:	0d52      	lsrs	r2, r2, #21
 80011b0:	2a01      	cmp	r2, #1
 80011b2:	dd29      	ble.n	8001208 <__aeabi_d2f+0x70>
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <__aeabi_d2f+0xfc>)
 80011b6:	18e7      	adds	r7, r4, r3
 80011b8:	2ffe      	cmp	r7, #254	; 0xfe
 80011ba:	dc1c      	bgt.n	80011f6 <__aeabi_d2f+0x5e>
 80011bc:	2f00      	cmp	r7, #0
 80011be:	dd3b      	ble.n	8001238 <__aeabi_d2f+0xa0>
 80011c0:	0180      	lsls	r0, r0, #6
 80011c2:	1e43      	subs	r3, r0, #1
 80011c4:	4198      	sbcs	r0, r3
 80011c6:	2207      	movs	r2, #7
 80011c8:	00f3      	lsls	r3, r6, #3
 80011ca:	0f6d      	lsrs	r5, r5, #29
 80011cc:	4303      	orrs	r3, r0
 80011ce:	432b      	orrs	r3, r5
 80011d0:	401a      	ands	r2, r3
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d004      	beq.n	80011e0 <__aeabi_d2f+0x48>
 80011d6:	220f      	movs	r2, #15
 80011d8:	401a      	ands	r2, r3
 80011da:	2a04      	cmp	r2, #4
 80011dc:	d000      	beq.n	80011e0 <__aeabi_d2f+0x48>
 80011de:	3304      	adds	r3, #4
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	04d2      	lsls	r2, r2, #19
 80011e4:	401a      	ands	r2, r3
 80011e6:	d024      	beq.n	8001232 <__aeabi_d2f+0x9a>
 80011e8:	3701      	adds	r7, #1
 80011ea:	b2fa      	uxtb	r2, r7
 80011ec:	2fff      	cmp	r7, #255	; 0xff
 80011ee:	d002      	beq.n	80011f6 <__aeabi_d2f+0x5e>
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	0a58      	lsrs	r0, r3, #9
 80011f4:	e001      	b.n	80011fa <__aeabi_d2f+0x62>
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	2000      	movs	r0, #0
 80011fa:	0240      	lsls	r0, r0, #9
 80011fc:	05d2      	lsls	r2, r2, #23
 80011fe:	0a40      	lsrs	r0, r0, #9
 8001200:	07c9      	lsls	r1, r1, #31
 8001202:	4310      	orrs	r0, r2
 8001204:	4308      	orrs	r0, r1
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001208:	4335      	orrs	r5, r6
 800120a:	2c00      	cmp	r4, #0
 800120c:	d104      	bne.n	8001218 <__aeabi_d2f+0x80>
 800120e:	2d00      	cmp	r5, #0
 8001210:	d10a      	bne.n	8001228 <__aeabi_d2f+0x90>
 8001212:	2200      	movs	r2, #0
 8001214:	2000      	movs	r0, #0
 8001216:	e7f0      	b.n	80011fa <__aeabi_d2f+0x62>
 8001218:	2d00      	cmp	r5, #0
 800121a:	d0ec      	beq.n	80011f6 <__aeabi_d2f+0x5e>
 800121c:	2080      	movs	r0, #128	; 0x80
 800121e:	03c0      	lsls	r0, r0, #15
 8001220:	4330      	orrs	r0, r6
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	e7e9      	b.n	80011fa <__aeabi_d2f+0x62>
 8001226:	2400      	movs	r4, #0
 8001228:	2300      	movs	r3, #0
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	0a58      	lsrs	r0, r3, #9
 800122e:	b2e2      	uxtb	r2, r4
 8001230:	e7e3      	b.n	80011fa <__aeabi_d2f+0x62>
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	003c      	movs	r4, r7
 8001236:	e7f8      	b.n	800122a <__aeabi_d2f+0x92>
 8001238:	003b      	movs	r3, r7
 800123a:	3317      	adds	r3, #23
 800123c:	dbf3      	blt.n	8001226 <__aeabi_d2f+0x8e>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	4333      	orrs	r3, r6
 8001244:	261e      	movs	r6, #30
 8001246:	1bf6      	subs	r6, r6, r7
 8001248:	2e1f      	cmp	r6, #31
 800124a:	dd14      	ble.n	8001276 <__aeabi_d2f+0xde>
 800124c:	2202      	movs	r2, #2
 800124e:	4252      	negs	r2, r2
 8001250:	1bd7      	subs	r7, r2, r7
 8001252:	001a      	movs	r2, r3
 8001254:	40fa      	lsrs	r2, r7
 8001256:	0017      	movs	r7, r2
 8001258:	2e20      	cmp	r6, #32
 800125a:	d004      	beq.n	8001266 <__aeabi_d2f+0xce>
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <__aeabi_d2f+0x100>)
 800125e:	4694      	mov	ip, r2
 8001260:	4464      	add	r4, ip
 8001262:	40a3      	lsls	r3, r4
 8001264:	431d      	orrs	r5, r3
 8001266:	002b      	movs	r3, r5
 8001268:	1e5d      	subs	r5, r3, #1
 800126a:	41ab      	sbcs	r3, r5
 800126c:	2207      	movs	r2, #7
 800126e:	433b      	orrs	r3, r7
 8001270:	401a      	ands	r2, r3
 8001272:	2700      	movs	r7, #0
 8001274:	e7ad      	b.n	80011d2 <__aeabi_d2f+0x3a>
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <__aeabi_d2f+0x104>)
 8001278:	0028      	movs	r0, r5
 800127a:	18a2      	adds	r2, r4, r2
 800127c:	4095      	lsls	r5, r2
 800127e:	4093      	lsls	r3, r2
 8001280:	1e6c      	subs	r4, r5, #1
 8001282:	41a5      	sbcs	r5, r4
 8001284:	40f0      	lsrs	r0, r6
 8001286:	2207      	movs	r2, #7
 8001288:	432b      	orrs	r3, r5
 800128a:	4303      	orrs	r3, r0
 800128c:	401a      	ands	r2, r3
 800128e:	2700      	movs	r7, #0
 8001290:	e79f      	b.n	80011d2 <__aeabi_d2f+0x3a>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	fffffc80 	.word	0xfffffc80
 8001298:	fffffca2 	.word	0xfffffca2
 800129c:	fffffc82 	.word	0xfffffc82

080012a0 <__clzsi2>:
 80012a0:	211c      	movs	r1, #28
 80012a2:	2301      	movs	r3, #1
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	4298      	cmp	r0, r3
 80012a8:	d301      	bcc.n	80012ae <__clzsi2+0xe>
 80012aa:	0c00      	lsrs	r0, r0, #16
 80012ac:	3910      	subs	r1, #16
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d301      	bcc.n	80012b8 <__clzsi2+0x18>
 80012b4:	0a00      	lsrs	r0, r0, #8
 80012b6:	3908      	subs	r1, #8
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d301      	bcc.n	80012c2 <__clzsi2+0x22>
 80012be:	0900      	lsrs	r0, r0, #4
 80012c0:	3904      	subs	r1, #4
 80012c2:	a202      	add	r2, pc, #8	; (adr r2, 80012cc <__clzsi2+0x2c>)
 80012c4:	5c10      	ldrb	r0, [r2, r0]
 80012c6:	1840      	adds	r0, r0, r1
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	02020304 	.word	0x02020304
 80012d0:	01010101 	.word	0x01010101
	...

080012dc <main>:
  * @retval int
  */


int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fc28 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 fa5a 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 fb0a 	bl	8001900 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ec:	f000 fac8 	bl	8001880 <MX_I2C1_Init>

  /* MPU6050 init */
  MPU6050Init();
 80012f0:	f000 f80c 	bl	800130c <MPU6050Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//1. E
	  ExitLPowMode();
 80012f4:	f000 fa2e 	bl	8001754 <ExitLPowMode>
	  AccRead();
 80012f8:	f000 f862 	bl	80013c0 <AccRead>
	  GyroRead();
 80012fc:	f000 f930 	bl	8001560 <GyroRead>
	  EnterLPowMode();
 8001300:	f000 f9fe 	bl	8001700 <EnterLPowMode>
	  HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f000 fc85 	bl	8001c14 <HAL_Delay>
	  ExitLPowMode();
 800130a:	e7f3      	b.n	80012f4 <main+0x18>

0800130c <MPU6050Init>:
/**
 * @brief Initilizes the sensor MPU6050
 *
 */
void MPU6050Init()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
	uint8_t status;
	uint8_t dataBuffer;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I,1, &status, 1, 1000);
 8001312:	482a      	ldr	r0, [pc, #168]	; (80013bc <MPU6050Init+0xb0>)
 8001314:	23fa      	movs	r3, #250	; 0xfa
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	2275      	movs	r2, #117	; 0x75
 8001326:	21d0      	movs	r1, #208	; 0xd0
 8001328:	f001 f88c 	bl	8002444 <HAL_I2C_Mem_Read>

	if (status == 104)  // 0x68 will be returned by the sensor if everything goes well
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b68      	cmp	r3, #104	; 0x68
 8001332:	d13f      	bne.n	80013b4 <MPU6050Init+0xa8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		dataBuffer = 0;
 8001334:	1dbb      	adds	r3, r7, #6
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU_PWR_MGMT, 1,&dataBuffer, 1, 1000);
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <MPU6050Init+0xb0>)
 800133c:	23fa      	movs	r3, #250	; 0xfa
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	226b      	movs	r2, #107	; 0x6b
 800134e:	21d0      	movs	r1, #208	; 0xd0
 8001350:	f000 ff4a 	bl	80021e8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		dataBuffer = 0x07;
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	2207      	movs	r2, #7
 8001358:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dataBuffer, 1, 1000);
 800135a:	4818      	ldr	r0, [pc, #96]	; (80013bc <MPU6050Init+0xb0>)
 800135c:	23fa      	movs	r3, #250	; 0xfa
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	1dbb      	adds	r3, r7, #6
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	2219      	movs	r2, #25
 800136e:	21d0      	movs	r1, #208	; 0xd0
 8001370:	f000 ff3a 	bl	80021e8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		dataBuffer = 0x00;
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &dataBuffer, 1, 1000);
 800137a:	4810      	ldr	r0, [pc, #64]	; (80013bc <MPU6050Init+0xb0>)
 800137c:	23fa      	movs	r3, #250	; 0xfa
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	1dbb      	adds	r3, r7, #6
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	221c      	movs	r2, #28
 800138e:	21d0      	movs	r1, #208	; 0xd0
 8001390:	f000 ff2a 	bl	80021e8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		dataBuffer = 0x00;
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &dataBuffer, 1, 1000);
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <MPU6050Init+0xb0>)
 800139c:	23fa      	movs	r3, #250	; 0xfa
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	221b      	movs	r2, #27
 80013ae:	21d0      	movs	r1, #208	; 0xd0
 80013b0:	f000 ff1a 	bl	80021e8 <HAL_I2C_Mem_Write>
	}

}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000038 	.word	0x20000038

080013c0 <AccRead>:
/**
 * @brief Initilizes the sensor MPU6050
 * @retval None
 */
void AccRead()
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	//the global variables will add upto 100 values for parameters
	for(int index=0;index<100;index++){
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e090      	b.n	80014ee <AccRead+0x12e>
		// Read 6 BYTES of data starting from ACCEL_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 80013cc:	485b      	ldr	r0, [pc, #364]	; (800153c <AccRead+0x17c>)
 80013ce:	23fa      	movs	r3, #250	; 0xfa
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2306      	movs	r3, #6
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	223b      	movs	r2, #59	; 0x3b
 80013e0:	21d0      	movs	r1, #208	; 0xd0
 80013e2:	f001 f82f 	bl	8002444 <HAL_I2C_Mem_Read>

		Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <AccRead+0x180>)
 80013fa:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	78db      	ldrb	r3, [r3, #3]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <AccRead+0x184>)
 8001410:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <AccRead+0x188>)
 8001426:	801a      	strh	r2, [r3, #0]
		// convert the RAW values into acceleration in 'g'
		//	we have to divide according to the Full scale value set in FS_SEL
		//	I have configured FS_SEL = 0. So I am dividing by 16384.0
		//	for more details check ACCEL_CONFIG Register

		Ax = Ax + (Accel_X_RAW/16384.0);
 8001428:	4b48      	ldr	r3, [pc, #288]	; (800154c <AccRead+0x18c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c18      	adds	r0, r3, #0
 800142e:	f7ff fe61 	bl	80010f4 <__aeabi_f2d>
 8001432:	0004      	movs	r4, r0
 8001434:	000d      	movs	r5, r1
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <AccRead+0x180>)
 8001438:	2200      	movs	r2, #0
 800143a:	5e9b      	ldrsh	r3, [r3, r2]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fe1f 	bl	8001080 <__aeabi_i2d>
 8001442:	2200      	movs	r2, #0
 8001444:	4b42      	ldr	r3, [pc, #264]	; (8001550 <AccRead+0x190>)
 8001446:	f7ff fb19 	bl	8000a7c <__aeabi_ddiv>
 800144a:	0002      	movs	r2, r0
 800144c:	000b      	movs	r3, r1
 800144e:	0020      	movs	r0, r4
 8001450:	0029      	movs	r1, r5
 8001452:	f7fe fff7 	bl	8000444 <__aeabi_dadd>
 8001456:	0003      	movs	r3, r0
 8001458:	000c      	movs	r4, r1
 800145a:	0018      	movs	r0, r3
 800145c:	0021      	movs	r1, r4
 800145e:	f7ff fe9b 	bl	8001198 <__aeabi_d2f>
 8001462:	1c02      	adds	r2, r0, #0
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <AccRead+0x18c>)
 8001466:	601a      	str	r2, [r3, #0]
		Ay = Ay + (Accel_Y_RAW/16384.0);
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <AccRead+0x194>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1c18      	adds	r0, r3, #0
 800146e:	f7ff fe41 	bl	80010f4 <__aeabi_f2d>
 8001472:	0004      	movs	r4, r0
 8001474:	000d      	movs	r5, r1
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <AccRead+0x184>)
 8001478:	2200      	movs	r2, #0
 800147a:	5e9b      	ldrsh	r3, [r3, r2]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fdff 	bl	8001080 <__aeabi_i2d>
 8001482:	2200      	movs	r2, #0
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <AccRead+0x190>)
 8001486:	f7ff faf9 	bl	8000a7c <__aeabi_ddiv>
 800148a:	0002      	movs	r2, r0
 800148c:	000b      	movs	r3, r1
 800148e:	0020      	movs	r0, r4
 8001490:	0029      	movs	r1, r5
 8001492:	f7fe ffd7 	bl	8000444 <__aeabi_dadd>
 8001496:	0003      	movs	r3, r0
 8001498:	000c      	movs	r4, r1
 800149a:	0018      	movs	r0, r3
 800149c:	0021      	movs	r1, r4
 800149e:	f7ff fe7b 	bl	8001198 <__aeabi_d2f>
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <AccRead+0x194>)
 80014a6:	601a      	str	r2, [r3, #0]
		Az = Az + (Accel_Z_RAW/16384.0);
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <AccRead+0x198>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1c18      	adds	r0, r3, #0
 80014ae:	f7ff fe21 	bl	80010f4 <__aeabi_f2d>
 80014b2:	0004      	movs	r4, r0
 80014b4:	000d      	movs	r5, r1
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <AccRead+0x188>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	5e9b      	ldrsh	r3, [r3, r2]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fddf 	bl	8001080 <__aeabi_i2d>
 80014c2:	2200      	movs	r2, #0
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <AccRead+0x190>)
 80014c6:	f7ff fad9 	bl	8000a7c <__aeabi_ddiv>
 80014ca:	0002      	movs	r2, r0
 80014cc:	000b      	movs	r3, r1
 80014ce:	0020      	movs	r0, r4
 80014d0:	0029      	movs	r1, r5
 80014d2:	f7fe ffb7 	bl	8000444 <__aeabi_dadd>
 80014d6:	0003      	movs	r3, r0
 80014d8:	000c      	movs	r4, r1
 80014da:	0018      	movs	r0, r3
 80014dc:	0021      	movs	r1, r4
 80014de:	f7ff fe5b 	bl	8001198 <__aeabi_d2f>
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <AccRead+0x198>)
 80014e6:	601a      	str	r2, [r3, #0]
	for(int index=0;index<100;index++){
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b63      	cmp	r3, #99	; 0x63
 80014f2:	dc00      	bgt.n	80014f6 <AccRead+0x136>
 80014f4:	e76a      	b.n	80013cc <AccRead+0xc>
	}
	Ax /= 100;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <AccRead+0x18c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4918      	ldr	r1, [pc, #96]	; (800155c <AccRead+0x19c>)
 80014fc:	1c18      	adds	r0, r3, #0
 80014fe:	f7fe fe8f 	bl	8000220 <__aeabi_fdiv>
 8001502:	1c03      	adds	r3, r0, #0
 8001504:	1c1a      	adds	r2, r3, #0
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <AccRead+0x18c>)
 8001508:	601a      	str	r2, [r3, #0]
	Ay /= 100;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <AccRead+0x194>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4913      	ldr	r1, [pc, #76]	; (800155c <AccRead+0x19c>)
 8001510:	1c18      	adds	r0, r3, #0
 8001512:	f7fe fe85 	bl	8000220 <__aeabi_fdiv>
 8001516:	1c03      	adds	r3, r0, #0
 8001518:	1c1a      	adds	r2, r3, #0
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <AccRead+0x194>)
 800151c:	601a      	str	r2, [r3, #0]
	Az /= 100;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <AccRead+0x198>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <AccRead+0x19c>)
 8001524:	1c18      	adds	r0, r3, #0
 8001526:	f7fe fe7b 	bl	8000220 <__aeabi_fdiv>
 800152a:	1c03      	adds	r3, r0, #0
 800152c:	1c1a      	adds	r2, r3, #0
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <AccRead+0x198>)
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	20000038 	.word	0x20000038
 8001540:	20000028 	.word	0x20000028
 8001544:	2000002a 	.word	0x2000002a
 8001548:	2000002c 	.word	0x2000002c
 800154c:	2000008c 	.word	0x2000008c
 8001550:	40d00000 	.word	0x40d00000
 8001554:	20000084 	.word	0x20000084
 8001558:	20000090 	.word	0x20000090
 800155c:	42c80000 	.word	0x42c80000

08001560 <GyroRead>:


void GyroRead()
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	//the global variables will add upto 100 values for parameters
	for(int index=0;index<100;index++){
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e090      	b.n	800168e <GyroRead+0x12e>

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 800156c:	485b      	ldr	r0, [pc, #364]	; (80016dc <GyroRead+0x17c>)
 800156e:	23fa      	movs	r3, #250	; 0xfa
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2306      	movs	r3, #6
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2301      	movs	r3, #1
 800157e:	2243      	movs	r2, #67	; 0x43
 8001580:	21d0      	movs	r1, #208	; 0xd0
 8001582:	f000 ff5f 	bl	8002444 <HAL_I2C_Mem_Read>

		Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <GyroRead+0x180>)
 800159a:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <GyroRead+0x184>)
 80015b0:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	795b      	ldrb	r3, [r3, #5]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <GyroRead+0x188>)
 80015c6:	801a      	strh	r2, [r3, #0]
		/*** convert the RAW values into dps (°/s)
			 we have to divide according to the Full scale value set in FS_SEL
			 I have configured FS_SEL = 0. So I am dividing by 131.0
			 for more details check GYRO_CONFIG Register              ****/

		Gx = Gx + (Gyro_X_RAW/131.0);
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <GyroRead+0x18c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1c18      	adds	r0, r3, #0
 80015ce:	f7ff fd91 	bl	80010f4 <__aeabi_f2d>
 80015d2:	0004      	movs	r4, r0
 80015d4:	000d      	movs	r5, r1
 80015d6:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <GyroRead+0x180>)
 80015d8:	2200      	movs	r2, #0
 80015da:	5e9b      	ldrsh	r3, [r3, r2]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fd4f 	bl	8001080 <__aeabi_i2d>
 80015e2:	2200      	movs	r2, #0
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <GyroRead+0x190>)
 80015e6:	f7ff fa49 	bl	8000a7c <__aeabi_ddiv>
 80015ea:	0002      	movs	r2, r0
 80015ec:	000b      	movs	r3, r1
 80015ee:	0020      	movs	r0, r4
 80015f0:	0029      	movs	r1, r5
 80015f2:	f7fe ff27 	bl	8000444 <__aeabi_dadd>
 80015f6:	0003      	movs	r3, r0
 80015f8:	000c      	movs	r4, r1
 80015fa:	0018      	movs	r0, r3
 80015fc:	0021      	movs	r1, r4
 80015fe:	f7ff fdcb 	bl	8001198 <__aeabi_d2f>
 8001602:	1c02      	adds	r2, r0, #0
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <GyroRead+0x18c>)
 8001606:	601a      	str	r2, [r3, #0]
		Gy = Gy + (Gyro_Y_RAW/131.0);
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <GyroRead+0x194>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1c18      	adds	r0, r3, #0
 800160e:	f7ff fd71 	bl	80010f4 <__aeabi_f2d>
 8001612:	0004      	movs	r4, r0
 8001614:	000d      	movs	r5, r1
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <GyroRead+0x184>)
 8001618:	2200      	movs	r2, #0
 800161a:	5e9b      	ldrsh	r3, [r3, r2]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff fd2f 	bl	8001080 <__aeabi_i2d>
 8001622:	2200      	movs	r2, #0
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <GyroRead+0x190>)
 8001626:	f7ff fa29 	bl	8000a7c <__aeabi_ddiv>
 800162a:	0002      	movs	r2, r0
 800162c:	000b      	movs	r3, r1
 800162e:	0020      	movs	r0, r4
 8001630:	0029      	movs	r1, r5
 8001632:	f7fe ff07 	bl	8000444 <__aeabi_dadd>
 8001636:	0003      	movs	r3, r0
 8001638:	000c      	movs	r4, r1
 800163a:	0018      	movs	r0, r3
 800163c:	0021      	movs	r1, r4
 800163e:	f7ff fdab 	bl	8001198 <__aeabi_d2f>
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <GyroRead+0x194>)
 8001646:	601a      	str	r2, [r3, #0]
		Gz = Gz + (Gyro_Z_RAW/131.0);
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <GyroRead+0x198>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1c18      	adds	r0, r3, #0
 800164e:	f7ff fd51 	bl	80010f4 <__aeabi_f2d>
 8001652:	0004      	movs	r4, r0
 8001654:	000d      	movs	r5, r1
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <GyroRead+0x188>)
 8001658:	2200      	movs	r2, #0
 800165a:	5e9b      	ldrsh	r3, [r3, r2]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fd0f 	bl	8001080 <__aeabi_i2d>
 8001662:	2200      	movs	r2, #0
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <GyroRead+0x190>)
 8001666:	f7ff fa09 	bl	8000a7c <__aeabi_ddiv>
 800166a:	0002      	movs	r2, r0
 800166c:	000b      	movs	r3, r1
 800166e:	0020      	movs	r0, r4
 8001670:	0029      	movs	r1, r5
 8001672:	f7fe fee7 	bl	8000444 <__aeabi_dadd>
 8001676:	0003      	movs	r3, r0
 8001678:	000c      	movs	r4, r1
 800167a:	0018      	movs	r0, r3
 800167c:	0021      	movs	r1, r4
 800167e:	f7ff fd8b 	bl	8001198 <__aeabi_d2f>
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <GyroRead+0x198>)
 8001686:	601a      	str	r2, [r3, #0]
	for(int index=0;index<100;index++){
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b63      	cmp	r3, #99	; 0x63
 8001692:	dc00      	bgt.n	8001696 <GyroRead+0x136>
 8001694:	e76a      	b.n	800156c <GyroRead+0xc>
	}
	Gx /= 100;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <GyroRead+0x18c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4918      	ldr	r1, [pc, #96]	; (80016fc <GyroRead+0x19c>)
 800169c:	1c18      	adds	r0, r3, #0
 800169e:	f7fe fdbf 	bl	8000220 <__aeabi_fdiv>
 80016a2:	1c03      	adds	r3, r0, #0
 80016a4:	1c1a      	adds	r2, r3, #0
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <GyroRead+0x18c>)
 80016a8:	601a      	str	r2, [r3, #0]
	Gy /= 100;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <GyroRead+0x194>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <GyroRead+0x19c>)
 80016b0:	1c18      	adds	r0, r3, #0
 80016b2:	f7fe fdb5 	bl	8000220 <__aeabi_fdiv>
 80016b6:	1c03      	adds	r3, r0, #0
 80016b8:	1c1a      	adds	r2, r3, #0
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <GyroRead+0x194>)
 80016bc:	601a      	str	r2, [r3, #0]
	Gz /= 100;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <GyroRead+0x198>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <GyroRead+0x19c>)
 80016c4:	1c18      	adds	r0, r3, #0
 80016c6:	f7fe fdab 	bl	8000220 <__aeabi_fdiv>
 80016ca:	1c03      	adds	r3, r0, #0
 80016cc:	1c1a      	adds	r2, r3, #0
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <GyroRead+0x198>)
 80016d0:	601a      	str	r2, [r3, #0]

}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000038 	.word	0x20000038
 80016e0:	2000002e 	.word	0x2000002e
 80016e4:	20000030 	.word	0x20000030
 80016e8:	20000032 	.word	0x20000032
 80016ec:	20000034 	.word	0x20000034
 80016f0:	40606000 	.word	0x40606000
 80016f4:	20000088 	.word	0x20000088
 80016f8:	20000094 	.word	0x20000094
 80016fc:	42c80000 	.word	0x42c80000

08001700 <EnterLPowMode>:


void EnterLPowMode()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    /* 1. Each digital IP clock must be enabled or disabled by using the
                   RCC_APBxENR and RCC_AHBENR registers */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <EnterLPowMode+0x48>)
 8001706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <EnterLPowMode+0x48>)
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	0549      	lsls	r1, r1, #21
 800170e:	430a      	orrs	r2, r1
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
    /* 2. The frequency of the system clock must be decreased to not exceed the
          frequency of f_MSI range1. */
    SystemClock_Config();
 8001712:	f000 f843 	bl	800179c <SystemClock_Config>
    // Reinitialize peripherals dependent on clock speed
    MX_I2C1_Init();
 8001716:	f000 f8b3 	bl	8001880 <MX_I2C1_Init>
    /* 3. The regulator is forced in low-power mode by software
          (LPRUN and LPSDSR bits set ) */
    PWR->CR &= ~PWR_CR_LPRUN; // Be sure LPRUN is cleared!
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <EnterLPowMode+0x4c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <EnterLPowMode+0x4c>)
 8001720:	490b      	ldr	r1, [pc, #44]	; (8001750 <EnterLPowMode+0x50>)
 8001722:	400a      	ands	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

    PWR->CR |= PWR_CR_LPSDSR; // must be set before LPRUN
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <EnterLPowMode+0x4c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <EnterLPowMode+0x4c>)
 800172c:	2101      	movs	r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
    PWR->CR |= PWR_CR_LPRUN; // enter low power run mode
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <EnterLPowMode+0x4c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <EnterLPowMode+0x4c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	01c9      	lsls	r1, r1, #7
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	ffffbfff 	.word	0xffffbfff

08001754 <ExitLPowMode>:

void ExitLPowMode()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    /* Enable Clocks */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <ExitLPowMode+0x3c>)
 800175a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <ExitLPowMode+0x3c>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0549      	lsls	r1, r1, #21
 8001762:	430a      	orrs	r2, r1
 8001764:	639a      	str	r2, [r3, #56]	; 0x38

    /* Force the regulator into main mode */
    // Reset LPRUN bit
    PWR->CR &= ~( PWR_CR_LPRUN );
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <ExitLPowMode+0x40>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <ExitLPowMode+0x40>)
 800176c:	490a      	ldr	r1, [pc, #40]	; (8001798 <ExitLPowMode+0x44>)
 800176e:	400a      	ands	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
    // LPSDSR can be reset only when LPRUN bit = 0;
    PWR->CR &= ~( PWR_CR_LPSDSR );
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <ExitLPowMode+0x40>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <ExitLPowMode+0x40>)
 8001778:	2101      	movs	r1, #1
 800177a:	438a      	bics	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
    //system clock config
    SystemClock_Config();
 800177e:	f000 f80d 	bl	800179c <SystemClock_Config>
    // Reinitialize peripherals dependent on clock speed
    MX_I2C1_Init();
 8001782:	f000 f87d 	bl	8001880 <MX_I2C1_Init>
    MPU6050Init();
 8001786:	f7ff fdc1 	bl	800130c <MPU6050Init>


}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40007000 	.word	0x40007000
 8001798:	ffffbfff 	.word	0xffffbfff

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b099      	sub	sp, #100	; 0x64
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	242c      	movs	r4, #44	; 0x2c
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	0018      	movs	r0, r3
 80017a8:	2334      	movs	r3, #52	; 0x34
 80017aa:	001a      	movs	r2, r3
 80017ac:	2100      	movs	r1, #0
 80017ae:	f002 f8c7 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b2:	2318      	movs	r3, #24
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	0018      	movs	r0, r3
 80017b8:	2314      	movs	r3, #20
 80017ba:	001a      	movs	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f002 f8bf 	bl	8003940 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c2:	003b      	movs	r3, r7
 80017c4:	0018      	movs	r0, r3
 80017c6:	2318      	movs	r3, #24
 80017c8:	001a      	movs	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f002 f8b8 	bl	8003940 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <SystemClock_Config+0xdc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a29      	ldr	r2, [pc, #164]	; (800187c <SystemClock_Config+0xe0>)
 80017d6:	401a      	ands	r2, r3
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <SystemClock_Config+0xdc>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0109      	lsls	r1, r1, #4
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e2:	0021      	movs	r1, r4
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	0252      	lsls	r2, r2, #9
 80017f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2202      	movs	r2, #2
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0252      	lsls	r2, r2, #9
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	22c0      	movs	r2, #192	; 0xc0
 8001804:	0312      	lsls	r2, r2, #12
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	03d2      	lsls	r2, r2, #15
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	187b      	adds	r3, r7, r1
 8001812:	0018      	movs	r0, r3
 8001814:	f001 fa20 	bl	8002c58 <HAL_RCC_OscConfig>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800181c:	f000 f892 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	2118      	movs	r1, #24
 8001822:	187b      	adds	r3, r7, r1
 8001824:	220f      	movs	r2, #15
 8001826:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2203      	movs	r2, #3
 800182c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	187b      	adds	r3, r7, r1
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001834:	187b      	adds	r3, r7, r1
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2101      	movs	r1, #1
 8001844:	0018      	movs	r0, r3
 8001846:	f001 fd81 	bl	800334c <HAL_RCC_ClockConfig>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800184e:	f000 f879 	bl	8001944 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001852:	003b      	movs	r3, r7
 8001854:	2208      	movs	r2, #8
 8001856:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001858:	003b      	movs	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185e:	003b      	movs	r3, r7
 8001860:	0018      	movs	r0, r3
 8001862:	f001 ff21 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800186a:	f000 f86b 	bl	8001944 <Error_Handler>
  }
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b019      	add	sp, #100	; 0x64
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40007000 	.word	0x40007000
 800187c:	ffffe7ff 	.word	0xffffe7ff

08001880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <MX_I2C1_Init+0x78>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_I2C1_Init+0x74>)
 800188c:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <MX_I2C1_Init+0x7c>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001898:	2201      	movs	r2, #1
 800189a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_I2C1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 fbfd 	bl	80020bc <HAL_I2C_Init>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018c6:	f000 f83d 	bl	8001944 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 f92a 	bl	8002b28 <HAL_I2CEx_ConfigAnalogFilter>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f000 f834 	bl	8001944 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018de:	2100      	movs	r1, #0
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 f96d 	bl	8002bc0 <HAL_I2CEx_ConfigDigitalFilter>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 f82b 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000038 	.word	0x20000038
 80018f8:	40005400 	.word	0x40005400
 80018fc:	00707cbb 	.word	0x00707cbb

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_GPIO_Init+0x40>)
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_GPIO_Init+0x40>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	430a      	orrs	r2, r1
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_GPIO_Init+0x40>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	4013      	ands	r3, r2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_GPIO_Init+0x40>)
 8001920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_GPIO_Init+0x40>)
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <MX_GPIO_Init+0x40>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40021000 	.word	0x40021000

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_MspInit+0x24>)
 8001956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_MspInit+0x24>)
 800195a:	2101      	movs	r1, #1
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_MspInit+0x24>)
 8001962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_MspInit+0x24>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0549      	lsls	r1, r1, #21
 800196a:	430a      	orrs	r2, r1
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	230c      	movs	r3, #12
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	0018      	movs	r0, r3
 8001986:	2314      	movs	r3, #20
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f001 ffd8 	bl	8003940 <memset>
  if(hi2c->Instance==I2C1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0x80>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12a      	bne.n	80019f0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_I2C_MspInit+0x84>)
 800199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_I2C_MspInit+0x84>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_I2C_MspInit+0x84>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2201      	movs	r2, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b2:	210c      	movs	r1, #12
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	22c0      	movs	r2, #192	; 0xc0
 80019b8:	00d2      	lsls	r2, r2, #3
 80019ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2212      	movs	r2, #18
 80019c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2201      	movs	r2, #1
 80019c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2203      	movs	r2, #3
 80019cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	2206      	movs	r2, #6
 80019d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	187a      	adds	r2, r7, r1
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 f9ef 	bl	8001dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_I2C_MspInit+0x84>)
 80019e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_I2C_MspInit+0x84>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0389      	lsls	r1, r1, #14
 80019ec:	430a      	orrs	r2, r1
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b008      	add	sp, #32
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40005400 	.word	0x40005400
 80019fc:	40021000 	.word	0x40021000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f8d8 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <SystemInit+0x64>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <SystemInit+0x64>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	0049      	lsls	r1, r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <SystemInit+0x64>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <SystemInit+0x64>)
 8001a4c:	4913      	ldr	r1, [pc, #76]	; (8001a9c <SystemInit+0x68>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <SystemInit+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <SystemInit+0x64>)
 8001a58:	4911      	ldr	r1, [pc, #68]	; (8001aa0 <SystemInit+0x6c>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <SystemInit+0x64>)
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <SystemInit+0x64>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <SystemInit+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <SystemInit+0x64>)
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <SystemInit+0x70>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <SystemInit+0x64>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <SystemInit+0x64>)
 8001a7c:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <SystemInit+0x74>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SystemInit+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <SystemInit+0x78>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	0512      	lsls	r2, r2, #20
 8001a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	88ff400c 	.word	0x88ff400c
 8001aa0:	fef6fff6 	.word	0xfef6fff6
 8001aa4:	fffbffff 	.word	0xfffbffff
 8001aa8:	ff02ffff 	.word	0xff02ffff
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001ab0:	4813      	ldr	r0, [pc, #76]	; (8001b00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <LoopForever+0x6>)
    LDR R1, [R0]
 8001ab6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001ab8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <LoopForever+0xa>)
    CMP R1, R2
 8001abc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001abe:	d105      	bne.n	8001acc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001ac0:	4812      	ldr	r0, [pc, #72]	; (8001b0c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ac2:	4913      	ldr	r1, [pc, #76]	; (8001b10 <LoopForever+0x12>)
    STR R1, [R0]
 8001ac4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ac6:	4813      	ldr	r0, [pc, #76]	; (8001b14 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ac8:	4913      	ldr	r1, [pc, #76]	; (8001b18 <LoopForever+0x1a>)
    STR R1, [R0]
 8001aca:	6001      	str	r1, [r0, #0]

08001acc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ace:	e003      	b.n	8001ad8 <LoopCopyDataInit>

08001ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8001ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ad6:	3104      	adds	r1, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <LoopForever+0x22>)
  ldr  r3, =_edata
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <LoopForever+0x26>)
  adds  r2, r0, r1
 8001adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ae0:	d3f6      	bcc.n	8001ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ae2:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8001ae4:	e002      	b.n	8001aec <LoopFillZerobss>

08001ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001ae6:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ae8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aea:	3204      	adds	r2, #4

08001aec <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <LoopForever+0x2e>)
  cmp  r2, r3
 8001aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001af0:	d3f9      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001af2:	f7ff ff9f 	bl	8001a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af6:	f001 feff 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afa:	f7ff fbef 	bl	80012dc <main>

08001afe <LoopForever>:

LoopForever:
    b LoopForever
 8001afe:	e7fe      	b.n	8001afe <LoopForever>
   ldr   r0, =_estack
 8001b00:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001b04:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001b08:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001b0c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001b10:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b14:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b18:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8001b1c:	08003a4c 	.word	0x08003a4c
  ldr  r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b24:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001b28:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001b2c:	2000009c 	.word	0x2000009c

08001b30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_IRQHandler>
	...

08001b34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_Init+0x3c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Init+0x3c>)
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f000 f811 	bl	8001b74 <HAL_InitTick>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e001      	b.n	8001b62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b5e:	f7ff fef7 	bl	8001950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001b7e:	681c      	ldr	r4, [r3, #0]
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_InitTick+0x60>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	23fa      	movs	r3, #250	; 0xfa
 8001b88:	0098      	lsls	r0, r3, #2
 8001b8a:	f7fe fabd 	bl	8000108 <__udivsi3>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	0019      	movs	r1, r3
 8001b92:	0020      	movs	r0, r4
 8001b94:	f7fe fab8 	bl	8000108 <__udivsi3>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 f903 	bl	8001da6 <HAL_SYSTICK_Config>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e00f      	b.n	8001bc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d80b      	bhi.n	8001bc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f8e0 	bl	8001d7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_InitTick+0x64>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	001a      	movs	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	18d2      	adds	r2, r2, r3
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000098 	.word	0x20000098

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	20000098 	.word	0x20000098

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_Delay+0x40>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	001a      	movs	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	f7ff ffe0 	bl	8001c00 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000008 	.word	0x20000008

08001c58 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c6c:	d932      	bls.n	8001cd4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <NVIC_SetPriority+0xd4>)
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	0019      	movs	r1, r3
 8001c76:	230f      	movs	r3, #15
 8001c78:	400b      	ands	r3, r1
 8001c7a:	3b08      	subs	r3, #8
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3306      	adds	r3, #6
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	18d3      	adds	r3, r2, r3
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1dfa      	adds	r2, r7, #7
 8001c8a:	7812      	ldrb	r2, [r2, #0]
 8001c8c:	0011      	movs	r1, r2
 8001c8e:	2203      	movs	r2, #3
 8001c90:	400a      	ands	r2, r1
 8001c92:	00d2      	lsls	r2, r2, #3
 8001c94:	21ff      	movs	r1, #255	; 0xff
 8001c96:	4091      	lsls	r1, r2
 8001c98:	000a      	movs	r2, r1
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	22ff      	movs	r2, #255	; 0xff
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	0018      	movs	r0, r3
 8001cae:	2303      	movs	r3, #3
 8001cb0:	4003      	ands	r3, r0
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb6:	481d      	ldr	r0, [pc, #116]	; (8001d2c <NVIC_SetPriority+0xd4>)
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	001c      	movs	r4, r3
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	4023      	ands	r3, r4
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	3306      	adds	r3, #6
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	18c3      	adds	r3, r0, r3
 8001cce:	3304      	adds	r3, #4
 8001cd0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cd2:	e027      	b.n	8001d24 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <NVIC_SetPriority+0xd8>)
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	33c0      	adds	r3, #192	; 0xc0
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	589b      	ldr	r3, [r3, r2]
 8001ce4:	1dfa      	adds	r2, r7, #7
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	0011      	movs	r1, r2
 8001cea:	2203      	movs	r2, #3
 8001cec:	400a      	ands	r2, r1
 8001cee:	00d2      	lsls	r2, r2, #3
 8001cf0:	21ff      	movs	r1, #255	; 0xff
 8001cf2:	4091      	lsls	r1, r2
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	43d2      	mvns	r2, r2
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	019b      	lsls	r3, r3, #6
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	401a      	ands	r2, r3
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	4003      	ands	r3, r0
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <NVIC_SetPriority+0xd8>)
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	33c0      	adds	r3, #192	; 0xc0
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	501a      	str	r2, [r3, r0]
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b003      	add	sp, #12
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	e000ed00 	.word	0xe000ed00
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <SysTick_Config+0x40>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e010      	b.n	8001d6c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <SysTick_Config+0x44>)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	2301      	movs	r3, #1
 8001d54:	425b      	negs	r3, r3
 8001d56:	2103      	movs	r1, #3
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff7d 	bl	8001c58 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SysTick_Config+0x44>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x44>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	00ffffff 	.word	0x00ffffff
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	210f      	movs	r1, #15
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	1c02      	adds	r2, r0, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ff5d 	bl	8001c58 <NVIC_SetPriority>
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff ffbf 	bl	8001d34 <SysTick_Config>
 8001db6:	0003      	movs	r3, r0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd6:	e155      	b.n	8002084 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4091      	lsls	r1, r2
 8001de2:	000a      	movs	r2, r1
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <HAL_GPIO_Init+0x30>
 8001dee:	e146      	b.n	800207e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00b      	beq.n	8001e10 <HAL_GPIO_Init+0x50>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e04:	2b11      	cmp	r3, #17
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	0013      	movs	r3, r2
 8001e20:	43da      	mvns	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	409a      	lsls	r2, r3
 8001e32:	0013      	movs	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0xf2>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d123      	bne.n	8001efa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	58d3      	ldr	r3, [r2, r3]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2107      	movs	r1, #7
 8001ede:	400b      	ands	r3, r1
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	6939      	ldr	r1, [r7, #16]
 8001ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	055b      	lsls	r3, r3, #21
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_GPIO_Init+0x17c>
 8001f3a:	e0a0      	b.n	800207e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3c:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_GPIO_Init+0x2dc>)
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_GPIO_Init+0x2dc>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f48:	4a55      	ldr	r2, [pc, #340]	; (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	589b      	ldr	r3, [r3, r2]
 8001f54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	409a      	lsls	r2, r3
 8001f62:	0013      	movs	r3, r2
 8001f64:	43da      	mvns	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	23a0      	movs	r3, #160	; 0xa0
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x1f6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_GPIO_Init+0x2e4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x1f2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2ec>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x1ea>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_GPIO_Init+0x2f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x1e6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_GPIO_Init+0x2f4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43da      	mvns	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	4013      	ands	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43da      	mvns	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	035b      	lsls	r3, r3, #13
 8002042:	4013      	ands	r3, r2
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43da      	mvns	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	4013      	ands	r3, r2
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	40da      	lsrs	r2, r3
 800208c:	1e13      	subs	r3, r2, #0
 800208e:	d000      	beq.n	8002092 <HAL_GPIO_Init+0x2d2>
 8002090:	e6a2      	b.n	8001dd8 <HAL_GPIO_Init+0x18>
  }
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b006      	add	sp, #24
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	50000400 	.word	0x50000400
 80020a8:	50000800 	.word	0x50000800
 80020ac:	50000c00 	.word	0x50000c00
 80020b0:	50001000 	.word	0x50001000
 80020b4:	50001c00 	.word	0x50001c00
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e082      	b.n	80021d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2241      	movs	r2, #65	; 0x41
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff fc47 	bl	8001978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2241      	movs	r2, #65	; 0x41
 80020ee:	2124      	movs	r1, #36	; 0x24
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	438a      	bics	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4934      	ldr	r1, [pc, #208]	; (80021dc <HAL_I2C_Init+0x120>)
 800210c:	400a      	ands	r2, r1
 800210e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4931      	ldr	r1, [pc, #196]	; (80021e0 <HAL_I2C_Init+0x124>)
 800211c:	400a      	ands	r2, r1
 800211e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0209      	lsls	r1, r1, #8
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e007      	b.n	800214a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2184      	movs	r1, #132	; 0x84
 8002144:	0209      	lsls	r1, r1, #8
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d104      	bne.n	800215c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	491f      	ldr	r1, [pc, #124]	; (80021e4 <HAL_I2C_Init+0x128>)
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	491a      	ldr	r1, [pc, #104]	; (80021e0 <HAL_I2C_Init+0x124>)
 8002178:	400a      	ands	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	431a      	orrs	r2, r3
 8002186:	0011      	movs	r1, r2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69d9      	ldr	r1, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2241      	movs	r2, #65	; 0x41
 80021c0:	2120      	movs	r1, #32
 80021c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2242      	movs	r2, #66	; 0x42
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f0ffffff 	.word	0xf0ffffff
 80021e0:	ffff7fff 	.word	0xffff7fff
 80021e4:	02008000 	.word	0x02008000

080021e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	000c      	movs	r4, r1
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	230a      	movs	r3, #10
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	1c22      	adds	r2, r4, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	2308      	movs	r3, #8
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	1c0a      	adds	r2, r1, #0
 800220a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2241      	movs	r2, #65	; 0x41
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d000      	beq.n	800221a <HAL_I2C_Mem_Write+0x32>
 8002218:	e10c      	b.n	8002434 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_I2C_Mem_Write+0x42>
 8002220:	232c      	movs	r3, #44	; 0x2c
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0ff      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2C_Mem_Write+0x5c>
 8002240:	2302      	movs	r3, #2
 8002242:	e0f8      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224c:	f7ff fcd8 	bl	8001c00 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	0219      	lsls	r1, r3, #8
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	f000 fb0b 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0e3      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2241      	movs	r2, #65	; 0x41
 8002272:	2121      	movs	r1, #33	; 0x21
 8002274:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2242      	movs	r2, #66	; 0x42
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	222c      	movs	r2, #44	; 0x2c
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	881c      	ldrh	r4, [r3, #0]
 800229e:	2308      	movs	r3, #8
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	230a      	movs	r3, #10
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	8819      	ldrh	r1, [r3, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0023      	movs	r3, r4
 80022b6:	f000 f9f9 	bl	80026ac <I2C_RequestMemoryWrite>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d005      	beq.n	80022ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	2100      	movs	r1, #0
 80022c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0b5      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d911      	bls.n	80022f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	045c      	lsls	r4, r3, #17
 80022e4:	230a      	movs	r3, #10
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	8819      	ldrh	r1, [r3, #0]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	0023      	movs	r3, r4
 80022f2:	f000 fbe3 	bl	8002abc <I2C_TransferConfig>
 80022f6:	e012      	b.n	800231e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	049c      	lsls	r4, r3, #18
 800230c:	230a      	movs	r3, #10
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	8819      	ldrh	r1, [r3, #0]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	0023      	movs	r3, r4
 800231a:	f000 fbcf 	bl	8002abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fae8 	bl	80028fa <I2C_WaitOnTXISFlagUntilTimeout>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e081      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03a      	beq.n	80023e2 <HAL_I2C_Mem_Write+0x1fa>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d136      	bne.n	80023e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	0013      	movs	r3, r2
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	f000 fa7b 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e053      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2bff      	cmp	r3, #255	; 0xff
 8002396:	d911      	bls.n	80023bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	045c      	lsls	r4, r3, #17
 80023a8:	230a      	movs	r3, #10
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	8819      	ldrh	r1, [r3, #0]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	2300      	movs	r3, #0
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	0023      	movs	r3, r4
 80023b6:	f000 fb81 	bl	8002abc <I2C_TransferConfig>
 80023ba:	e012      	b.n	80023e2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	049c      	lsls	r4, r3, #18
 80023d0:	230a      	movs	r3, #10
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	8819      	ldrh	r1, [r3, #0]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	2300      	movs	r3, #0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0023      	movs	r3, r4
 80023de:	f000 fb6d 	bl	8002abc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d198      	bne.n	800231e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fac0 	bl	8002978 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d001      	beq.n	8002400 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e01a      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	490b      	ldr	r1, [pc, #44]	; (8002440 <HAL_I2C_Mem_Write+0x258>)
 8002414:	400a      	ands	r2, r1
 8002416:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2241      	movs	r2, #65	; 0x41
 800241c:	2120      	movs	r1, #32
 800241e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2242      	movs	r2, #66	; 0x42
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b007      	add	sp, #28
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	fe00e800 	.word	0xfe00e800

08002444 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	000c      	movs	r4, r1
 800244e:	0010      	movs	r0, r2
 8002450:	0019      	movs	r1, r3
 8002452:	230a      	movs	r3, #10
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	1c22      	adds	r2, r4, #0
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	2308      	movs	r3, #8
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	1c02      	adds	r2, r0, #0
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	1dbb      	adds	r3, r7, #6
 8002464:	1c0a      	adds	r2, r1, #0
 8002466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2241      	movs	r2, #65	; 0x41
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b20      	cmp	r3, #32
 8002472:	d000      	beq.n	8002476 <HAL_I2C_Mem_Read+0x32>
 8002474:	e110      	b.n	8002698 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_I2C_Mem_Read+0x42>
 800247c:	232c      	movs	r3, #44	; 0x2c
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e103      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	5c9b      	ldrb	r3, [r3, r2]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_I2C_Mem_Read+0x5c>
 800249c:	2302      	movs	r3, #2
 800249e:	e0fc      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	2101      	movs	r1, #1
 80024a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a8:	f7ff fbaa 	bl	8001c00 <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	0219      	lsls	r1, r3, #8
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2319      	movs	r3, #25
 80024bc:	2201      	movs	r2, #1
 80024be:	f000 f9dd 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0e7      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2241      	movs	r2, #65	; 0x41
 80024ce:	2122      	movs	r1, #34	; 0x22
 80024d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2242      	movs	r2, #66	; 0x42
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	222c      	movs	r2, #44	; 0x2c
 80024ea:	18ba      	adds	r2, r7, r2
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	881c      	ldrh	r4, [r3, #0]
 80024fa:	2308      	movs	r3, #8
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	230a      	movs	r3, #10
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	8819      	ldrh	r1, [r3, #0]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0023      	movs	r3, r4
 8002512:	f000 f92f 	bl	8002774 <I2C_RequestMemoryRead>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d005      	beq.n	8002526 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0b9      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2bff      	cmp	r3, #255	; 0xff
 800252e:	d911      	bls.n	8002554 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	b2da      	uxtb	r2, r3
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	045c      	lsls	r4, r3, #17
 8002540:	230a      	movs	r3, #10
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	8819      	ldrh	r1, [r3, #0]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_I2C_Mem_Read+0x260>)
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	0023      	movs	r3, r4
 800254e:	f000 fab5 	bl	8002abc <I2C_TransferConfig>
 8002552:	e012      	b.n	800257a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	b2da      	uxtb	r2, r3
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	049c      	lsls	r4, r3, #18
 8002568:	230a      	movs	r3, #10
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <HAL_I2C_Mem_Read+0x260>)
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	0023      	movs	r3, r4
 8002576:	f000 faa1 	bl	8002abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	0013      	movs	r3, r2
 8002584:	2200      	movs	r2, #0
 8002586:	2104      	movs	r1, #4
 8002588:	f000 f978 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e082      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03a      	beq.n	8002646 <HAL_I2C_Mem_Read+0x202>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d136      	bne.n	8002646 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	0013      	movs	r3, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	f000 f949 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e053      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2bff      	cmp	r3, #255	; 0xff
 80025fa:	d911      	bls.n	8002620 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	b2da      	uxtb	r2, r3
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	045c      	lsls	r4, r3, #17
 800260c:	230a      	movs	r3, #10
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	8819      	ldrh	r1, [r3, #0]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	0023      	movs	r3, r4
 800261a:	f000 fa4f 	bl	8002abc <I2C_TransferConfig>
 800261e:	e012      	b.n	8002646 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	b2da      	uxtb	r2, r3
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	049c      	lsls	r4, r3, #18
 8002634:	230a      	movs	r3, #10
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	8819      	ldrh	r1, [r3, #0]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	0023      	movs	r3, r4
 8002642:	f000 fa3b 	bl	8002abc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d194      	bne.n	800257a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f98e 	bl	8002978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e01a      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2220      	movs	r2, #32
 800266a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	490c      	ldr	r1, [pc, #48]	; (80026a8 <HAL_I2C_Mem_Read+0x264>)
 8002678:	400a      	ands	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2241      	movs	r2, #65	; 0x41
 8002680:	2120      	movs	r1, #32
 8002682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2242      	movs	r2, #66	; 0x42
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e000      	b.n	800269a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
  }
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b007      	add	sp, #28
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	80002400 	.word	0x80002400
 80026a8:	fe00e800 	.word	0xfe00e800

080026ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b5b0      	push	{r4, r5, r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	000c      	movs	r4, r1
 80026b6:	0010      	movs	r0, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	250a      	movs	r5, #10
 80026bc:	197b      	adds	r3, r7, r5
 80026be:	1c22      	adds	r2, r4, #0
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	2308      	movs	r3, #8
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	1c02      	adds	r2, r0, #0
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	1c0a      	adds	r2, r1, #0
 80026ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026d0:	1dbb      	adds	r3, r7, #6
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	045c      	lsls	r4, r3, #17
 80026da:	197b      	adds	r3, r7, r5
 80026dc:	8819      	ldrh	r1, [r3, #0]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <I2C_RequestMemoryWrite+0xc4>)
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	0023      	movs	r3, r4
 80026e6:	f000 f9e9 	bl	8002abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 f902 	bl	80028fa <I2C_WaitOnTXISFlagUntilTimeout>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e033      	b.n	8002766 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026fe:	1dbb      	adds	r3, r7, #6
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002706:	2308      	movs	r3, #8
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
 8002714:	e019      	b.n	800274a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002716:	2308      	movs	r3, #8
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f8e3 	bl	80028fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e014      	b.n	8002766 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800273c:	2308      	movs	r3, #8
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800274a:	6a3a      	ldr	r2, [r7, #32]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	0013      	movs	r3, r2
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	f000 f890 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d001      	beq.n	8002764 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	80002000 	.word	0x80002000

08002774 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	000c      	movs	r4, r1
 800277e:	0010      	movs	r0, r2
 8002780:	0019      	movs	r1, r3
 8002782:	250a      	movs	r5, #10
 8002784:	197b      	adds	r3, r7, r5
 8002786:	1c22      	adds	r2, r4, #0
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	2308      	movs	r3, #8
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	1c02      	adds	r2, r0, #0
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	1c0a      	adds	r2, r1, #0
 8002796:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	197b      	adds	r3, r7, r5
 80027a0:	8819      	ldrh	r1, [r3, #0]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <I2C_RequestMemoryRead+0xc0>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2300      	movs	r3, #0
 80027aa:	f000 f987 	bl	8002abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 f8a0 	bl	80028fa <I2C_WaitOnTXISFlagUntilTimeout>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e033      	b.n	800282a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c2:	1dbb      	adds	r3, r7, #6
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ca:	2308      	movs	r3, #8
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
 80027d8:	e019      	b.n	800280e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027da:	2308      	movs	r3, #8
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f881 	bl	80028fa <I2C_WaitOnTXISFlagUntilTimeout>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e014      	b.n	800282a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	2308      	movs	r3, #8
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280e:	6a3a      	ldr	r2, [r7, #32]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	0013      	movs	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	f000 f82e 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bdb0      	pop	{r4, r5, r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	80002000 	.word	0x80002000

08002838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2202      	movs	r2, #2
 8002848:	4013      	ands	r3, r2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d103      	bne.n	8002856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	2b01      	cmp	r3, #1
 8002862:	d007      	beq.n	8002874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
  }
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}

0800287c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	e021      	b.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	d01e      	beq.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7ff f9b4 	bl	8001c00 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2220      	movs	r2, #32
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	2120      	movs	r1, #32
 80028bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2242      	movs	r2, #66	; 0x42
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	425a      	negs	r2, r3
 80028e2:	4153      	adcs	r3, r2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	001a      	movs	r2, r3
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d0ce      	beq.n	800288e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002906:	e02b      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f86e 	bl	80029f0 <I2C_IsAcknowledgeFailed>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e029      	b.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3301      	adds	r3, #1
 8002920:	d01e      	beq.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f96d 	bl	8001c00 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	2220      	movs	r2, #32
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2241      	movs	r2, #65	; 0x41
 8002948:	2120      	movs	r1, #32
 800294a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2242      	movs	r2, #66	; 0x42
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d1cc      	bne.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	e028      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f82f 	bl	80029f0 <I2C_IsAcknowledgeFailed>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e026      	b.n	80029e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff f931 	bl	8001c00 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d113      	bne.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2220      	movs	r2, #32
 80029b6:	431a      	orrs	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2241      	movs	r2, #65	; 0x41
 80029c0:	2120      	movs	r1, #32
 80029c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2242      	movs	r2, #66	; 0x42
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e007      	b.n	80029e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2220      	movs	r2, #32
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d1cf      	bne.n	8002986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2210      	movs	r2, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d151      	bne.n	8002aae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0a:	e021      	b.n	8002a50 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	d01e      	beq.n	8002a50 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7ff f8f5 	bl	8001c00 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_IsAcknowledgeFailed+0x38>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2241      	movs	r2, #65	; 0x41
 8002a38:	2120      	movs	r1, #32
 8002a3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2242      	movs	r2, #66	; 0x42
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02f      	b.n	8002ab0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2220      	movs	r2, #32
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d1d6      	bne.n	8002a0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2210      	movs	r2, #16
 8002a64:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fee1 	bl	8002838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	490d      	ldr	r1, [pc, #52]	; (8002ab8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2241      	movs	r2, #65	; 0x41
 8002a96:	2120      	movs	r1, #32
 8002a98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2242      	movs	r2, #66	; 0x42
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b004      	add	sp, #16
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	fe00e800 	.word	0xfe00e800

08002abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	240a      	movs	r4, #10
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	1c02      	adds	r2, r0, #0
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	2009      	movs	r0, #9
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	1c0a      	adds	r2, r1, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	0d51      	lsrs	r1, r2, #21
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	00d2      	lsls	r2, r2, #3
 8002ae8:	400a      	ands	r2, r1
 8002aea:	490e      	ldr	r1, [pc, #56]	; (8002b24 <I2C_TransferConfig+0x68>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	43d2      	mvns	r2, r2
 8002af0:	401a      	ands	r2, r3
 8002af2:	0011      	movs	r1, r2
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	059b      	lsls	r3, r3, #22
 8002afa:	0d9a      	lsrs	r2, r3, #22
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	0418      	lsls	r0, r3, #16
 8002b02:	23ff      	movs	r3, #255	; 0xff
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	4003      	ands	r3, r0
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b005      	add	sp, #20
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	03ff63ff 	.word	0x03ff63ff

08002b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2241      	movs	r2, #65	; 0x41
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d138      	bne.n	8002bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2240      	movs	r2, #64	; 0x40
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e032      	b.n	8002bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2241      	movs	r2, #65	; 0x41
 8002b58:	2124      	movs	r1, #36	; 0x24
 8002b5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2101      	movs	r1, #1
 8002b68:	438a      	bics	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4911      	ldr	r1, [pc, #68]	; (8002bbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2241      	movs	r2, #65	; 0x41
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	2100      	movs	r1, #0
 8002baa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffffefff 	.word	0xffffefff

08002bc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2241      	movs	r2, #65	; 0x41
 8002bce:	5c9b      	ldrb	r3, [r3, r2]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d139      	bne.n	8002c4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e033      	b.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	2101      	movs	r1, #1
 8002bea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2241      	movs	r2, #65	; 0x41
 8002bf0:	2124      	movs	r1, #36	; 0x24
 8002bf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2241      	movs	r2, #65	; 0x41
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffff0ff 	.word	0xfffff0ff

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f000 fb6a 	bl	8003340 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6c:	4bc7      	ldr	r3, [pc, #796]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	220c      	movs	r2, #12
 8002c72:	4013      	ands	r3, r2
 8002c74:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c76:	4bc5      	ldr	r3, [pc, #788]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x36>
 8002c8c:	e07d      	b.n	8002d8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d007      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d112      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x68>
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	025b      	lsls	r3, r3, #9
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4bb9      	ldr	r3, [pc, #740]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	4013      	ands	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5a>
 8002cb0:	e06a      	b.n	8002d88 <HAL_RCC_OscConfig+0x130>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d166      	bne.n	8002d88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f000 fb40 	bl	8003340 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x84>
 8002ccc:	4baf      	ldr	r3, [pc, #700]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4bae      	ldr	r3, [pc, #696]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0249      	lsls	r1, r1, #9
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e027      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	23a0      	movs	r3, #160	; 0xa0
 8002ce2:	02db      	lsls	r3, r3, #11
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10e      	bne.n	8002d06 <HAL_RCC_OscConfig+0xae>
 8002ce8:	4ba8      	ldr	r3, [pc, #672]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4ba7      	ldr	r3, [pc, #668]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	02c9      	lsls	r1, r1, #11
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4ba5      	ldr	r3, [pc, #660]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4ba4      	ldr	r3, [pc, #656]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0249      	lsls	r1, r1, #9
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e012      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002d06:	4ba1      	ldr	r3, [pc, #644]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4ba0      	ldr	r3, [pc, #640]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d0c:	49a0      	ldr	r1, [pc, #640]	; (8002f90 <HAL_RCC_OscConfig+0x338>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	4b9e      	ldr	r3, [pc, #632]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4b9a      	ldr	r3, [pc, #616]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b99      	ldr	r3, [pc, #612]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d26:	499b      	ldr	r1, [pc, #620]	; (8002f94 <HAL_RCC_OscConfig+0x33c>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d014      	beq.n	8002d5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe ff64 	bl	8001c00 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3e:	f7fe ff5f 	bl	8001c00 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e2f7      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d50:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0xe6>
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe ff4f 	bl	8001c00 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe ff4a 	bl	8001c00 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2e2      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d7a:	4b84      	ldr	r3, [pc, #528]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	4013      	ands	r3, r2
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x110>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d100      	bne.n	8002d96 <HAL_RCC_OscConfig+0x13e>
 8002d94:	e098      	b.n	8002ec8 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	2220      	movs	r2, #32
 8002da0:	4013      	ands	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002da4:	4b79      	ldr	r3, [pc, #484]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002daa:	2120      	movs	r1, #32
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2220      	movs	r2, #32
 8002db4:	4393      	bics	r3, r2
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d13d      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1e8>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d13a      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002dca:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_RCC_OscConfig+0x186>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e2b0      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b6b      	ldr	r3, [pc, #428]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <HAL_RCC_OscConfig+0x340>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002df4:	4b65      	ldr	r3, [pc, #404]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2209      	movs	r2, #9
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e06:	f000 fbcb 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8002e0a:	0001      	movs	r1, r0
 8002e0c:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	220f      	movs	r2, #15
 8002e14:	4013      	ands	r3, r2
 8002e16:	4a61      	ldr	r2, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x344>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	000a      	movs	r2, r1
 8002e1c:	40da      	lsrs	r2, r3
 8002e1e:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_RCC_OscConfig+0x348>)
 8002e20:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002e22:	2513      	movs	r5, #19
 8002e24:	197c      	adds	r4, r7, r5
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fe fea4 	bl	8001b74 <HAL_InitTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e30:	197b      	adds	r3, r7, r5
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d047      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002e38:	2313      	movs	r3, #19
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	e27f      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d027      	beq.n	8002e96 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e46:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2209      	movs	r2, #9
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fed2 	bl	8001c00 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fe fecd 	bl	8001c00 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e265      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e74:	4b45      	ldr	r3, [pc, #276]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0f1      	beq.n	8002e62 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <HAL_RCC_OscConfig+0x340>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e018      	b.n	8002ec8 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	438a      	bics	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fead 	bl	8001c00 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe fea8 	bl	8001c00 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e240      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ebe:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d1f1      	bne.n	8002eac <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d100      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x27c>
 8002ed2:	e09e      	b.n	8003012 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13f      	bne.n	8002f5a <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e226      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x34c>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	0a19      	lsrs	r1, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	061a      	lsls	r2, r3, #24
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	3301      	adds	r3, #1
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	0212      	lsls	r2, r2, #8
 8002f26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	210f      	movs	r1, #15
 8002f30:	400b      	ands	r3, r1
 8002f32:	491a      	ldr	r1, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x344>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_OscConfig+0x348>)
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002f3c:	2513      	movs	r5, #19
 8002f3e:	197c      	adds	r4, r7, r5
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fe fe17 	bl	8001b74 <HAL_InitTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f4a:	197b      	adds	r3, r7, r5
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d05f      	beq.n	8003012 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8002f52:	2313      	movs	r3, #19
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	e1f2      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d03d      	beq.n	8002fde <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_OscConfig+0x334>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fe46 	bl	8001c00 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f78:	e016      	b.n	8002fa8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fe41 	bl	8001c00 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d90f      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1d9      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	fffeffff 	.word	0xfffeffff
 8002f94:	fffbffff 	.word	0xfffbffff
 8002f98:	ffffe0ff 	.word	0xffffe0ff
 8002f9c:	08003a28 	.word	0x08003a28
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fa8:	4bca      	ldr	r3, [pc, #808]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0e2      	beq.n	8002f7a <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb4:	4bc7      	ldr	r3, [pc, #796]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4ac7      	ldr	r2, [pc, #796]	; (80032d8 <HAL_RCC_OscConfig+0x680>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	4bc4      	ldr	r3, [pc, #784]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc8:	4bc2      	ldr	r3, [pc, #776]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	061a      	lsls	r2, r3, #24
 8002fd6:	4bbf      	ldr	r3, [pc, #764]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	e019      	b.n	8003012 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fde:	4bbd      	ldr	r3, [pc, #756]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4bbc      	ldr	r3, [pc, #752]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	49bd      	ldr	r1, [pc, #756]	; (80032dc <HAL_RCC_OscConfig+0x684>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fe09 	bl	8001c00 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fe04 	bl	8001c00 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e19c      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003006:	4bb3      	ldr	r3, [pc, #716]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003024:	4bab      	ldr	r3, [pc, #684]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003028:	4baa      	ldr	r3, [pc, #680]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800302a:	2101      	movs	r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe fde6 	bl	8001c00 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe fde1 	bl	8001c00 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e179      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800304c:	4ba1      	ldr	r3, [pc, #644]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	2202      	movs	r2, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d0f1      	beq.n	800303a <HAL_RCC_OscConfig+0x3e2>
 8003056:	e018      	b.n	800308a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b9e      	ldr	r3, [pc, #632]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800305a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800305c:	4b9d      	ldr	r3, [pc, #628]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fe fdcc 	bl	8001c00 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe fdc7 	bl	8001c00 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e15f      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003080:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d1f1      	bne.n	800306e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x43e>
 8003094:	e0af      	b.n	80031f6 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2323      	movs	r3, #35	; 0x23
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	055b      	lsls	r3, r3, #21
 80030a6:	4013      	ands	r3, r2
 80030a8:	d10a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	4b89      	ldr	r3, [pc, #548]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0549      	lsls	r1, r1, #21
 80030b4:	430a      	orrs	r2, r1
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030b8:	2323      	movs	r3, #35	; 0x23
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b87      	ldr	r3, [pc, #540]	; (80032e0 <HAL_RCC_OscConfig+0x688>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	d11a      	bne.n	8003102 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030cc:	4b84      	ldr	r3, [pc, #528]	; (80032e0 <HAL_RCC_OscConfig+0x688>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b83      	ldr	r3, [pc, #524]	; (80032e0 <HAL_RCC_OscConfig+0x688>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0049      	lsls	r1, r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030da:	f7fe fd91 	bl	8001c00 <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fe fd8c 	bl	8001c00 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e124      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x688>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	429a      	cmp	r2, r3
 800310c:	d107      	bne.n	800311e <HAL_RCC_OscConfig+0x4c6>
 800310e:	4b71      	ldr	r3, [pc, #452]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003112:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0049      	lsls	r1, r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	651a      	str	r2, [r3, #80]	; 0x50
 800311c:	e031      	b.n	8003182 <HAL_RCC_OscConfig+0x52a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x4e8>
 8003126:	4b6b      	ldr	r3, [pc, #428]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312a:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800312c:	496b      	ldr	r1, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x684>)
 800312e:	400a      	ands	r2, r1
 8003130:	651a      	str	r2, [r3, #80]	; 0x50
 8003132:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003136:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003138:	496a      	ldr	r1, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x68c>)
 800313a:	400a      	ands	r2, r1
 800313c:	651a      	str	r2, [r3, #80]	; 0x50
 800313e:	e020      	b.n	8003182 <HAL_RCC_OscConfig+0x52a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	23a0      	movs	r3, #160	; 0xa0
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	429a      	cmp	r2, r3
 800314a:	d10e      	bne.n	800316a <HAL_RCC_OscConfig+0x512>
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800314e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003150:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	00c9      	lsls	r1, r1, #3
 8003156:	430a      	orrs	r2, r1
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
 800315a:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800315c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315e:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	651a      	str	r2, [r3, #80]	; 0x50
 8003168:	e00b      	b.n	8003182 <HAL_RCC_OscConfig+0x52a>
 800316a:	4b5a      	ldr	r3, [pc, #360]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800316c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316e:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003170:	495a      	ldr	r1, [pc, #360]	; (80032dc <HAL_RCC_OscConfig+0x684>)
 8003172:	400a      	ands	r2, r1
 8003174:	651a      	str	r2, [r3, #80]	; 0x50
 8003176:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800317a:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800317c:	4959      	ldr	r1, [pc, #356]	; (80032e4 <HAL_RCC_OscConfig+0x68c>)
 800317e:	400a      	ands	r2, r1
 8003180:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d015      	beq.n	80031b6 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe fd39 	bl	8001c00 <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003192:	e009      	b.n	80031a8 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fd34 	bl	8001c00 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_OscConfig+0x690>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0cb      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a8:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80031aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0ef      	beq.n	8003194 <HAL_RCC_OscConfig+0x53c>
 80031b4:	e014      	b.n	80031e0 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b6:	f7fe fd23 	bl	8001c00 <HAL_GetTick>
 80031ba:	0003      	movs	r3, r0
 80031bc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031be:	e009      	b.n	80031d4 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fd1e 	bl	8001c00 <HAL_GetTick>
 80031c4:	0002      	movs	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x690>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0b5      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80031d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d1ef      	bne.n	80031c0 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e0:	2323      	movs	r3, #35	; 0x23
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80031ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80031f0:	493e      	ldr	r1, [pc, #248]	; (80032ec <HAL_RCC_OscConfig+0x694>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d100      	bne.n	8003200 <HAL_RCC_OscConfig+0x5a8>
 80031fe:	e09e      	b.n	800333e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d100      	bne.n	8003208 <HAL_RCC_OscConfig+0x5b0>
 8003206:	e077      	b.n	80032f8 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b02      	cmp	r3, #2
 800320e:	d145      	bne.n	800329c <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003210:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003216:	4936      	ldr	r1, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x698>)
 8003218:	400a      	ands	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fcf0 	bl	8001c00 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe fceb 	bl	8001c00 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e083      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	049b      	lsls	r3, r3, #18
 8003240:	4013      	ands	r3, r2
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x69c>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	431a      	orrs	r2, r3
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0449      	lsls	r1, r1, #17
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fcc5 	bl	8001c00 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fcc0 	bl	8001c00 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e058      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	049b      	lsls	r3, r3, #18
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x624>
 800329a:	e050      	b.n	800333e <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	4913      	ldr	r1, [pc, #76]	; (80032f0 <HAL_RCC_OscConfig+0x698>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fcaa 	bl	8001c00 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fca5 	bl	8001c00 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e03d      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_OscConfig+0x67c>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	049b      	lsls	r3, r3, #18
 80032cc:	4013      	ands	r3, r2
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x65a>
 80032d0:	e035      	b.n	800333e <HAL_RCC_OscConfig+0x6e6>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	40021000 	.word	0x40021000
 80032d8:	ffff1fff 	.word	0xffff1fff
 80032dc:	fffffeff 	.word	0xfffffeff
 80032e0:	40007000 	.word	0x40007000
 80032e4:	fffffbff 	.word	0xfffffbff
 80032e8:	00001388 	.word	0x00001388
 80032ec:	efffffff 	.word	0xefffffff
 80032f0:	feffffff 	.word	0xfeffffff
 80032f4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x6f0>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	025b      	lsls	r3, r3, #9
 8003310:	401a      	ands	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	429a      	cmp	r2, r3
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	23f0      	movs	r3, #240	; 0xf0
 800331e:	039b      	lsls	r3, r3, #14
 8003320:	401a      	ands	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d107      	bne.n	800333a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	401a      	ands	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b00a      	add	sp, #40	; 0x28
 8003346:	bdb0      	pop	{r4, r5, r7, pc}
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e10d      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d911      	bls.n	8003392 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	4393      	bics	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	4b82      	ldr	r3, [pc, #520]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003380:	4b80      	ldr	r3, [pc, #512]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4013      	ands	r3, r2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0f4      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b7a      	ldr	r3, [pc, #488]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	22f0      	movs	r2, #240	; 0xf0
 80033a2:	4393      	bics	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b77      	ldr	r3, [pc, #476]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d100      	bne.n	80033bc <HAL_RCC_ClockConfig+0x70>
 80033ba:	e089      	b.n	80034d0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c4:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	029b      	lsls	r3, r3, #10
 80033cc:	4013      	ands	r3, r2
 80033ce:	d120      	bne.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0d3      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	049b      	lsls	r3, r3, #18
 80033e4:	4013      	ands	r3, r2
 80033e6:	d114      	bne.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0c7      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0bc      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0b4      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2203      	movs	r2, #3
 8003418:	4393      	bics	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 8003422:	430a      	orrs	r2, r1
 8003424:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003426:	f7fe fbeb 	bl	8001c00 <HAL_GetTick>
 800342a:	0003      	movs	r3, r0
 800342c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d111      	bne.n	800345a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003436:	e009      	b.n	800344c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe fbe2 	bl	8001c00 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x240>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e097      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800344c:	4b4e      	ldr	r3, [pc, #312]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	220c      	movs	r2, #12
 8003452:	4013      	ands	r3, r2
 8003454:	2b08      	cmp	r3, #8
 8003456:	d1ef      	bne.n	8003438 <HAL_RCC_ClockConfig+0xec>
 8003458:	e03a      	b.n	80034d0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d111      	bne.n	8003486 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003462:	e009      	b.n	8003478 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fbcc 	bl	8001c00 <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x240>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e081      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	220c      	movs	r2, #12
 800347e:	4013      	ands	r3, r2
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d1ef      	bne.n	8003464 <HAL_RCC_ClockConfig+0x118>
 8003484:	e024      	b.n	80034d0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d11b      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe fbb6 	bl	8001c00 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	4a3c      	ldr	r2, [pc, #240]	; (800358c <HAL_RCC_ClockConfig+0x240>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e06b      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d1ef      	bne.n	8003490 <HAL_RCC_ClockConfig+0x144>
 80034b0:	e00e      	b.n	80034d0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b2:	f7fe fba5 	bl	8001c00 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	4a33      	ldr	r2, [pc, #204]	; (800358c <HAL_RCC_ClockConfig+0x240>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e05a      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	220c      	movs	r2, #12
 80034cc:	4013      	ands	r3, r2
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d211      	bcs.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4393      	bics	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_ClockConfig+0x238>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e03c      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2204      	movs	r2, #4
 8003508:	4013      	ands	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_RCC_ClockConfig+0x244>)
 8003512:	4013      	ands	r3, r2
 8003514:	0019      	movs	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800351c:	430a      	orrs	r2, r1
 800351e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	4013      	ands	r3, r2
 8003528:	d00a      	beq.n	8003540 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_RCC_ClockConfig+0x248>)
 8003530:	4013      	ands	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00da      	lsls	r2, r3, #3
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003540:	f000 f82e 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8003544:	0001      	movs	r1, r0
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_RCC_ClockConfig+0x23c>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	220f      	movs	r2, #15
 800354e:	4013      	ands	r3, r2
 8003550:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_RCC_ClockConfig+0x24c>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	000a      	movs	r2, r1
 8003556:	40da      	lsrs	r2, r3
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_RCC_ClockConfig+0x250>)
 800355a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800355c:	250b      	movs	r5, #11
 800355e:	197c      	adds	r4, r7, r5
 8003560:	2000      	movs	r0, #0
 8003562:	f7fe fb07 	bl	8001b74 <HAL_InitTick>
 8003566:	0003      	movs	r3, r0
 8003568:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800356a:	197b      	adds	r3, r7, r5
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8003572:	230b      	movs	r3, #11
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	e000      	b.n	800357c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bdb0      	pop	{r4, r5, r7, pc}
 8003584:	40022000 	.word	0x40022000
 8003588:	40021000 	.word	0x40021000
 800358c:	00001388 	.word	0x00001388
 8003590:	fffff8ff 	.word	0xfffff8ff
 8003594:	ffffc7ff 	.word	0xffffc7ff
 8003598:	08003a28 	.word	0x08003a28
 800359c:	20000000 	.word	0x20000000

080035a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	220c      	movs	r2, #12
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d00e      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d00f      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3a>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d157      	bne.n	800366e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035be:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	4013      	ands	r3, r2
 80035c6:	d002      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ca:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80035cc:	e05d      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCC_GetSysClockFreq+0xfc>)
 80035d0:	613b      	str	r3, [r7, #16]
      break;
 80035d2:	e05a      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80035d6:	613b      	str	r3, [r7, #16]
      break;
 80035d8:	e057      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0c9b      	lsrs	r3, r3, #18
 80035de:	220f      	movs	r2, #15
 80035e0:	4013      	ands	r3, r2
 80035e2:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	0d9b      	lsrs	r3, r3, #22
 80035ec:	2203      	movs	r2, #3
 80035ee:	4013      	ands	r3, r2
 80035f0:	3301      	adds	r3, #1
 80035f2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f4:	4b27      	ldr	r3, [pc, #156]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	025b      	lsls	r3, r3, #9
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00f      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	000a      	movs	r2, r1
 8003604:	0152      	lsls	r2, r2, #5
 8003606:	1a52      	subs	r2, r2, r1
 8003608:	0193      	lsls	r3, r2, #6
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	185b      	adds	r3, r3, r1
 8003610:	025b      	lsls	r3, r3, #9
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f7fc fd77 	bl	8000108 <__udivsi3>
 800361a:	0003      	movs	r3, r0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e023      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2210      	movs	r2, #16
 8003626:	4013      	ands	r3, r2
 8003628:	d00f      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	000a      	movs	r2, r1
 800362e:	0152      	lsls	r2, r2, #5
 8003630:	1a52      	subs	r2, r2, r1
 8003632:	0193      	lsls	r3, r2, #6
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	185b      	adds	r3, r3, r1
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f7fc fd62 	bl	8000108 <__udivsi3>
 8003644:	0003      	movs	r3, r0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e00e      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	000a      	movs	r2, r1
 800364e:	0152      	lsls	r2, r2, #5
 8003650:	1a52      	subs	r2, r2, r1
 8003652:	0193      	lsls	r3, r2, #6
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	185b      	adds	r3, r3, r1
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f7fc fd52 	bl	8000108 <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
      break;
 800366c:	e00d      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0b5b      	lsrs	r3, r3, #13
 8003674:	2207      	movs	r2, #7
 8003676:	4013      	ands	r3, r2
 8003678:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      break;
 8003688:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800368a:	693b      	ldr	r3, [r7, #16]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b006      	add	sp, #24
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	003d0900 	.word	0x003d0900
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	08003a38 	.word	0x08003a38

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2220      	movs	r2, #32
 80036b6:	4013      	ands	r3, r2
 80036b8:	d100      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x14>
 80036ba:	e0c7      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80036bc:	2317      	movs	r3, #23
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c4:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	4013      	ands	r3, r2
 80036ce:	d10a      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	0549      	lsls	r1, r1, #21
 80036da:	430a      	orrs	r2, r1
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d11a      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b77      	ldr	r3, [pc, #476]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	0049      	lsls	r1, r1, #1
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003700:	f7fe fa7e 	bl	8001c00 <HAL_GetTick>
 8003704:	0003      	movs	r3, r0
 8003706:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fe fa79 	bl	8001c00 <HAL_GetTick>
 800370e:	0002      	movs	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b64      	cmp	r3, #100	; 0x64
 8003716:	d901      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0d4      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4013      	ands	r3, r2
 8003726:	d0f0      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003728:	4b69      	ldr	r3, [pc, #420]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	23c0      	movs	r3, #192	; 0xc0
 800372e:	039b      	lsls	r3, r3, #14
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	23c0      	movs	r3, #192	; 0xc0
 800373a:	039b      	lsls	r3, r3, #14
 800373c:	4013      	ands	r3, r2
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d013      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	23c0      	movs	r3, #192	; 0xc0
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	401a      	ands	r2, r3
 800374e:	23c0      	movs	r3, #192	; 0xc0
 8003750:	029b      	lsls	r3, r3, #10
 8003752:	429a      	cmp	r2, r3
 8003754:	d10a      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	401a      	ands	r2, r3
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	429a      	cmp	r2, r3
 8003766:	d101      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ac      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800376e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003770:	23c0      	movs	r3, #192	; 0xc0
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	4013      	ands	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03b      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	23c0      	movs	r3, #192	; 0xc0
 8003784:	029b      	lsls	r3, r3, #10
 8003786:	4013      	ands	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	429a      	cmp	r2, r3
 800378c:	d033      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	4013      	ands	r3, r2
 8003796:	d02e      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	4a4e      	ldr	r2, [pc, #312]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800379e:	4013      	ands	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	0309      	lsls	r1, r1, #12
 80037ac:	430a      	orrs	r2, r1
 80037ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037b6:	4949      	ldr	r1, [pc, #292]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037bc:	4b44      	ldr	r3, [pc, #272]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d014      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fa18 	bl	8001c00 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d4:	e009      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe fa13 	bl	8001c00 <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e06d      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d0ef      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	23c0      	movs	r3, #192	; 0xc0
 80037fc:	029b      	lsls	r3, r3, #10
 80037fe:	401a      	ands	r2, r3
 8003800:	23c0      	movs	r3, #192	; 0xc0
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	429a      	cmp	r2, r3
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	23c0      	movs	r3, #192	; 0xc0
 8003818:	039b      	lsls	r3, r3, #14
 800381a:	401a      	ands	r2, r3
 800381c:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003824:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	029b      	lsls	r3, r3, #10
 800382e:	401a      	ands	r2, r3
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003832:	430a      	orrs	r2, r1
 8003834:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003836:	2317      	movs	r3, #23
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003846:	4928      	ldr	r1, [pc, #160]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003848:	400a      	ands	r2, r1
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	220c      	movs	r2, #12
 800385c:	4393      	bics	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003866:	430a      	orrs	r2, r1
 8003868:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800387a:	4013      	ands	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003884:	430a      	orrs	r2, r1
 8003886:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003898:	4013      	ands	r3, r2
 800389a:	0019      	movs	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80038a2:	430a      	orrs	r2, r1
 80038a4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	4013      	ands	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b006      	add	sp, #24
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	fffcffff 	.word	0xfffcffff
 80038dc:	fff7ffff 	.word	0xfff7ffff
 80038e0:	00001388 	.word	0x00001388
 80038e4:	ffcfffff 	.word	0xffcfffff
 80038e8:	efffffff 	.word	0xefffffff
 80038ec:	fffff3ff 	.word	0xfffff3ff
 80038f0:	ffffcfff 	.word	0xffffcfff
 80038f4:	fff3ffff 	.word	0xfff3ffff

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2600      	movs	r6, #0
 80038fc:	4d0c      	ldr	r5, [pc, #48]	; (8003930 <__libc_init_array+0x38>)
 80038fe:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	2600      	movs	r6, #0
 800390a:	f000 f821 	bl	8003950 <_init>
 800390e:	4d0a      	ldr	r5, [pc, #40]	; (8003938 <__libc_init_array+0x40>)
 8003910:	4c0a      	ldr	r4, [pc, #40]	; (800393c <__libc_init_array+0x44>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	00b3      	lsls	r3, r6, #2
 800391e:	58eb      	ldr	r3, [r5, r3]
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	00b3      	lsls	r3, r6, #2
 8003928:	58eb      	ldr	r3, [r5, r3]
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08003a44 	.word	0x08003a44
 8003934:	08003a44 	.word	0x08003a44
 8003938:	08003a44 	.word	0x08003a44
 800393c:	08003a48 	.word	0x08003a48

08003940 <memset>:
 8003940:	0003      	movs	r3, r0
 8003942:	1812      	adds	r2, r2, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	7019      	strb	r1, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
